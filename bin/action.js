// Generated by Haxe 4.3.0
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.fold = function(it,f,first) {
	var x = $getIterator(it);
	while(x.hasNext()) first = f(x.next(),first);
	return first;
};
Math.__name__ = true;
var Safety = function() { };
Safety.__name__ = true;
Safety.or = function(value,defaultValue) {
	if(value == null) {
		return defaultValue;
	} else {
		return value;
	}
};
Safety.orGet = function(value,getter) {
	if(value == null) {
		return getter();
	} else {
		return value;
	}
};
Safety.sure = function(value) {
	if(value == null) {
		throw new safety_NullPointerException("Null pointer in .sure() call");
	} else {
		return value;
	}
};
Safety.unsafe = function(value) {
	return value;
};
Safety.check = function(value,callback) {
	if(value != null) {
		return callback(value);
	} else {
		return false;
	}
};
Safety.let = function(value,callback) {
	if(value == null) {
		return null;
	} else {
		return callback(value);
	}
};
Safety.run = function(value,callback) {
	if(value != null) {
		callback(value);
	}
};
Safety.apply = function(value,callback) {
	if(value != null) {
		callback(value);
	}
	return value;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var Sys = function() { };
Sys.__name__ = true;
Sys.sleep = function(seconds) {
	var end = Date.now() + seconds * 1000;
	while(Date.now() <= end) {
	}
};
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = true;
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Output.hx", lineNumber : 47, className : "haxe.io.Output", methodName : "writeByte"});
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeString: function(s,encoding) {
		var b = haxe_io_Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
};
var _$Sys_FileOutput = function(fd) {
	this.fd = fd;
};
_$Sys_FileOutput.__name__ = true;
_$Sys_FileOutput.__super__ = haxe_io_Output;
_$Sys_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		js_node_Fs.writeSync(this.fd,String.fromCodePoint(c));
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		return js_node_Fs.writeSync(this.fd,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),pos,len);
	}
	,writeString: function(s,encoding) {
		js_node_Fs.writeSync(this.fd,s);
	}
	,flush: function() {
		js_node_Fs.fsyncSync(this.fd);
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
});
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
haxe_io_Input.prototype = {
	readByte: function() {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Input.hx", lineNumber : 53, className : "haxe.io.Input", methodName : "readByte"});
	}
	,readLine: function() {
		var buf = new haxe_io_BytesBuffer();
		var last;
		var s;
		try {
			while(true) {
				last = this.readByte();
				if(!(last != 10)) {
					break;
				}
				buf.addByte(last);
			}
			s = buf.getBytes().toString();
			if(HxOverrides.cca(s,s.length - 1) == 13) {
				s = HxOverrides.substr(s,0,-1);
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof haxe_io_Eof)) {
				s = buf.getBytes().toString();
				if(s.length == 0) {
					throw haxe_Exception.thrown(_g1);
				}
			} else {
				throw _g;
			}
		}
		return s;
	}
};
var _$Sys_FileInput = function(fd) {
	this.fd = fd;
};
_$Sys_FileInput.__name__ = true;
_$Sys_FileInput.__super__ = haxe_io_Input;
_$Sys_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		var buf = js_node_buffer_Buffer.alloc(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(_g1.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(_g1));
			}
		}
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(_g1.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(_g1));
			}
		}
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
});
var actions_Core = require("@actions/core");
var diff_Analyze = function() { };
diff_Analyze.__name__ = true;
diff_Analyze.discardConfusingLines = function(file1,file2) {
};
diff_Analyze.analyzeHunk = function(ctx,script) {
	var showFrom = 0;
	var showTo = 0;
	var first0 = script[0].line0;
	var first1 = script[0].line1;
	var l0 = 0;
	var l1 = 0;
	var _g = 0;
	while(_g < script.length) {
		var next = script[_g];
		++_g;
		l0 = next.line0 + next.deleted - 1;
		l1 = next.line1 + next.inserted - 1;
		showFrom += next.deleted;
		showTo += next.inserted;
	}
	return { first0 : first0, first1 : first1, last0 : l0, last1 : l1, showFrom : showFrom > 0, showTo : showTo > 0};
};
diff_Analyze.buildScript = function(ctx) {
	var currentChange = null;
	var firstChange = null;
	var addChange = function(line0,line1,deleted,inserted) {
		var change = new diff_Change(null,inserted,deleted,line0,line1);
		if(currentChange == null) {
			currentChange = change;
			firstChange = change;
		} else {
			currentChange.next = change;
			currentChange = change;
		}
	};
	var changed0 = ctx.file1.changed;
	var changed1 = ctx.file2.changed;
	var len0 = ctx.file1.lines.length;
	var len1 = ctx.file2.lines.length;
	var i0 = 0;
	var i1 = 0;
	while(i0 < len0 || i1 < len1) {
		if((changed0.v[changed0.index + i0] | changed1.v[changed1.index + i1]) != 0) {
			var line0 = i0;
			var line1 = i1;
			while(changed0.v[changed0.index + i0] != 0) ++i0;
			while(changed1.v[changed1.index + i1] != 0) ++i1;
			addChange(line0,line1,i0 - line0,i1 - line1);
		}
		++i0;
		++i1;
	}
	return firstChange;
};
diff_Analyze.printNormalHunk = function(ctx,script) {
	var buf_b = "";
	var _g = 0;
	while(_g < script.length) {
		var change = script[_g];
		++_g;
		if(change.deleted > 0) {
			var _g1 = change.line0;
			var _g2 = change.line0 + change.deleted;
			while(_g1 < _g2) {
				var line = ctx.file1.lines[_g1++];
				buf_b += "< ";
				buf_b += Std.string(ctx.file1.data.sub(line.pos,line.length));
				buf_b += String.fromCodePoint(10);
			}
		}
		buf_b += "---\n";
		if(change.inserted > 0) {
			var _g3 = change.line1;
			var _g4 = change.line1 + change.inserted;
			while(_g3 < _g4) {
				var line1 = ctx.file2.lines[_g3++];
				buf_b += "> ";
				buf_b += Std.string(ctx.file2.data.sub(line1.pos,line1.length).toString());
				buf_b += String.fromCodePoint(10);
			}
		}
	}
	return buf_b;
};
diff_Analyze.diff2Files = function(ctx) {
	diff_Io.readFiles(ctx);
	var flagSpace = new Array(ctx.file1.lines.length + ctx.file2.lines.length + 4);
	var _g = 0;
	var _g1 = flagSpace.length;
	while(_g < _g1) flagSpace[_g++] = 0;
	ctx.file1.changed = new diff__$IndexVector_IV(flagSpace,1);
	ctx.file2.changed = new diff__$IndexVector_IV(flagSpace,ctx.file1.lines.length + 3);
	var diags = ctx.file1.equivs.length + ctx.file2.equivs.length + 3;
	var fdiag = new diff__$IndexVector_IV(new Array(diags * 2),0);
	var bdiag = new diff__$IndexVector_IV(fdiag.v,fdiag.index + diags);
	fdiag.index += ctx.file2.equivs.length + 1;
	bdiag.index += ctx.file2.equivs.length + 1;
	var dCtx = new diff_DiffseqContext(ctx.file1.equivs,ctx.file2.equivs,fdiag,bdiag,function(d) {
		ctx.file1.markChange(d);
	},function(d) {
		ctx.file2.markChange(d);
	});
	diff_Diffseq.compareseq(0,ctx.file1.equivs.length,0,ctx.file2.equivs.length,dCtx);
	return diff_Analyze.buildScript(ctx);
};
var diff_Change = function(next,inserted,deleted,line0,line1) {
	this.next = next;
	this.inserted = inserted;
	this.deleted = deleted;
	this.line0 = line0;
	this.line1 = line1;
};
diff_Change.__name__ = true;
diff_Change.prototype = {
	toString: function() {
		return "[CHANGE inserted: " + this.inserted + ", deleted: " + this.deleted + ", line0: " + this.line0 + ", line1: " + this.line1 + "]";
	}
};
var diff_Context = function(file1,file2,context) {
	this.file1 = file1;
	this.file2 = file2;
	this.context = context;
};
diff_Context.__name__ = true;
var diff__$Diffseq_Parition = function(xmid,ymid) {
	this.xmid = xmid;
	this.ymid = ymid;
};
diff__$Diffseq_Parition.__name__ = true;
diff__$Diffseq_Parition.prototype = {
	toString: function() {
		return "[Partition xmid: " + this.xmid + ", ymid: " + this.ymid + "]";
	}
};
var diff_DiffseqContext = function(xvec,yvec,fdiag,bdiag,NOTE_DELETE,NOTE_INSERT) {
	this.xvec = xvec;
	this.yvec = yvec;
	this.fdiag = fdiag;
	this.bdiag = bdiag;
	this.NOTE_DELETE = NOTE_DELETE;
	this.NOTE_INSERT = NOTE_INSERT;
};
diff_DiffseqContext.__name__ = true;
var diff_Diffseq = function() { };
diff_Diffseq.__name__ = true;
diff_Diffseq.diag = function(xoff,xlim,yoff,ylim,ctxt) {
	var fd = ctxt.fdiag;
	var bd = ctxt.bdiag;
	var xv = ctxt.xvec;
	var yv = ctxt.yvec;
	var dmin = xoff - ylim;
	var dmax = xlim - yoff;
	var fmid = xoff - yoff;
	var bmid = xlim - ylim;
	var fmin = fmid;
	var fmax = fmid;
	var bmin = bmid;
	var bmax = bmid;
	var odd = (fmid - bmid & 1) != 0;
	fd.v[fd.index + fmid] = xoff;
	bd.v[bd.index + bmid] = xlim;
	while(true) {
		if(fmin > dmin) {
			fd.v[fd.index + (--fmin - 1)] = -1;
		} else {
			++fmin;
		}
		if(fmax < dmax) {
			fd.v[fd.index + (++fmax + 1)] = -1;
		} else {
			--fmax;
		}
		var d = fmax;
		while(d >= fmin) {
			var tlo = fd.v[fd.index + (d - 1)];
			var thi = fd.v[fd.index + (d + 1)];
			var x0 = tlo < thi ? thi : tlo + 1;
			var x = x0;
			var y = x0 - d;
			while(x < xlim && y < ylim && xv[x] == yv[y]) {
				++x;
				++y;
			}
			fd.v[fd.index + d] = x;
			if(odd && bmin <= d && d <= bmax && bd.v[bd.index + d] <= x) {
				return new diff__$Diffseq_Parition(x,y);
			}
			d -= 2;
		}
		if(bmin > dmin) {
			bd.v[bd.index + (--bmin - 1)] = diff_Diffseq_OFFSET_MAX;
		} else {
			++bmin;
		}
		if(bmax < dmax) {
			bd.v[bd.index + (++bmax + 1)] = diff_Diffseq_OFFSET_MAX;
		} else {
			--bmax;
		}
		d = bmax;
		while(d >= bmin) {
			var tlo1 = bd.v[bd.index + (d - 1)];
			var thi1 = bd.v[bd.index + (d + 1)];
			var x01 = tlo1 < thi1 ? tlo1 : thi1 - 1;
			var x1 = x01;
			var y1 = x01 - d;
			while(xoff < x1 && yoff < y1 && xv[x1 - 1] == yv[y1 - 1]) {
				--x1;
				--y1;
			}
			bd.v[bd.index + d] = x1;
			if(!odd && fmin <= d && d <= fmax && x1 <= fd.v[fd.index + d]) {
				return new diff__$Diffseq_Parition(x1,y1);
			}
			d -= 2;
		}
	}
};
diff_Diffseq.compareseq = function(xoff,xlim,yoff,ylim,ctxt) {
	var xv = ctxt.xvec;
	var yv = ctxt.yvec;
	while(true) {
		while(xoff < xlim && yoff < ylim && xv[xoff] == yv[yoff]) {
			++xoff;
			++yoff;
		}
		while(xoff < xlim && yoff < ylim && xv[xlim - 1] == yv[ylim - 1]) {
			--xlim;
			--ylim;
		}
		if(xoff == xlim) {
			while(yoff < ylim) {
				ctxt.NOTE_INSERT(yoff);
				++yoff;
			}
			break;
		}
		if(yoff == ylim) {
			while(xoff < xlim) {
				ctxt.NOTE_DELETE(xoff);
				++xoff;
			}
			break;
		}
		var part = diff_Diffseq.diag(xoff,xlim,yoff,ylim,ctxt);
		var xoff1;
		var xlim1;
		var yoff1;
		var ylim1;
		var xoff2;
		var xlim2;
		var yoff2;
		var ylim2;
		if(xlim + ylim - (part.xmid + part.ymid) < part.xmid + part.ymid - (xoff + yoff)) {
			xoff1 = part.xmid;
			xlim1 = xlim;
			yoff1 = part.ymid;
			ylim1 = ylim;
			xoff2 = xoff;
			xlim2 = part.xmid;
			yoff2 = yoff;
			ylim2 = part.ymid;
		} else {
			xoff1 = xoff;
			xlim1 = part.xmid;
			yoff1 = yoff;
			ylim1 = part.ymid;
			xoff2 = part.xmid;
			xlim2 = xlim;
			yoff2 = part.ymid;
			ylim2 = ylim;
		}
		diff_Diffseq.compareseq(xoff1,xlim1,yoff1,ylim1,ctxt);
		xoff = xoff2;
		xlim = xlim2;
		yoff = yoff2;
		ylim = ylim2;
	}
	return false;
};
var diff__$FileData_Line = function(pos,length) {
	this.pos = pos;
	this.length = length;
};
diff__$FileData_Line.__name__ = true;
var diff_FileData = function(data,label,mtime) {
	this.label = label;
	this.mtime = mtime;
	this.data = data;
	this.prefixEnd = 0;
	this.suffixBegin = data.length;
	this.equivCount = [];
	this.lines = [];
};
diff_FileData.__name__ = true;
diff_FileData.prototype = {
	addLine: function(pos,length) {
		this.lines.push(new diff__$FileData_Line(pos,length));
	}
	,markChange: function(line) {
		var this1 = this.changed;
		this1.v[this1.index + line] = 1;
	}
	,finishLineProcessing: function(equivs) {
		this.equivs = equivs.slice(0);
	}
	,increaseEquivCount: function(index) {
		if(this.equivCount[index] == null) {
			this.equivCount[index] = 1;
		} else {
			this.equivCount[index]++;
		}
	}
	,dump: function() {
		var buf_b = "";
		buf_b = "" + Std.string("  prefixEnd: " + this.prefixEnd + "\n");
		buf_b += Std.string("suffixBegin: " + this.suffixBegin + "\n");
		buf_b += Std.string("     equivs: " + Std.string(this.equivs) + "\n");
		buf_b += Std.string(" equivCount: " + Std.string(this.equivCount) + "\n");
		return buf_b;
	}
};
var diff__$IndexVector_IV = function(v,index) {
	this.v = v;
	this.index = index;
};
diff__$IndexVector_IV.__name__ = true;
var diff_IndexVector = {};
diff_IndexVector._new = function(v,index) {
	return new diff__$IndexVector_IV(v,index);
};
diff_IndexVector.addAssign = function(this1,rhs) {
	this1.index += rhs;
};
diff_IndexVector.add = function(this1,delta) {
	return new diff__$IndexVector_IV(this1.v,this1.index + delta);
};
diff_IndexVector.read = function(this1,delta) {
	return this1.v[this1.index + delta];
};
diff_IndexVector.write = function(this1,delta,v) {
	return this1.v[this1.index + delta] = v;
};
diff_IndexVector.toString = function(this1) {
	return "[IV +" + this1.index + "]";
};
var diff_BytesTools = function() { };
diff_BytesTools.__name__ = true;
diff_BytesTools.compareSub = function(bytes1,pos1,bytes2,pos2,length) {
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		if(bytes1.b[pos1 + i] != bytes2.b[pos2 + i]) {
			return false;
		}
	}
	return true;
};
var diff__$Io_Equivclass = function(hash,bytes,pos,length) {
	this.hash = hash;
	this.bytes = bytes;
	this.pos = pos;
	this.length = length;
};
diff__$Io_Equivclass.__name__ = true;
var diff__$Io_IoContext = function() {
	this.equivLut = new haxe_ds_IntMap();
	this.equivs = [];
};
diff__$Io_IoContext.__name__ = true;
diff__$Io_IoContext.prototype = {
	addEquiv: function(equiv) {
		return this.equivs.push(equiv) - 1;
	}
	,getEquiv: function(i) {
		return this.equivs[i];
	}
	,lookup: function(hash) {
		var a = this.equivLut.h[hash];
		if(a == null) {
			a = [];
			this.equivLut.h[hash] = a;
		}
		return a;
	}
};
var diff_Io = function() { };
diff_Io.__name__ = true;
diff_Io.ROL = function(v,n) {
	return v << n | v >> 32 - n;
};
diff_Io.HASH = function(h,c) {
	return c + (h << 7 | h >> 25);
};
diff_Io.findIdenticalEnds = function(ctx) {
	var w1 = 0;
	var file1 = ctx.file1;
	var file2 = ctx.file2;
	var len1 = file1.data.length;
	var len2 = file2.data.length;
	var min = len1 < len2 ? len1 : len2;
	var newlineCount = 0;
	var ringMod = ctx.context + 1;
	var newlineRing = new Array(ringMod);
	var c;
	while(true) {
		var tmp;
		if(w1 < min) {
			c = file1.data.b[w1];
			tmp = c == file2.data.b[w1];
		} else {
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		if(c == 10) {
			newlineRing[newlineCount++ % ringMod] = w1;
		}
		++w1;
	}
	if(newlineCount < ringMod) {
		file1.prefixEnd = 0;
		file2.prefixEnd = 0;
		newlineCount = 0;
	} else {
		file1.prefixEnd = newlineRing[newlineCount % ringMod] + 1;
		file2.prefixEnd = file1.prefixEnd;
		newlineCount -= ringMod - 1;
	}
	file1.prefixNewlines = file2.prefixNewlines = newlineCount;
	w1 = len1 - 1;
	var w2 = len2 - 1;
	newlineCount = 0;
	while(true) {
		var tmp;
		if(w1 > file1.prefixEnd && w2 > file2.prefixEnd) {
			c = file1.data.b[w1];
			tmp = c == file2.data.b[w2];
		} else {
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		if(c == 10) {
			newlineRing[newlineCount++ % ringMod] = w1;
		}
		--w1;
		--w2;
	}
	if(newlineCount < ringMod) {
		file1.suffixBegin = len1 - 1;
		file2.suffixBegin = len2 - 1;
	} else {
		file1.suffixBegin = newlineRing[newlineCount % ringMod] + 1;
		file2.suffixBegin = file1.suffixBegin + (len2 - len1);
	}
};
diff_Io.findAndHashEachLine = function(ctx,file) {
	var p = file.prefixEnd;
	var c = 0;
	var cureqs = [];
	while(p < file.suffixBegin) {
		var ip = p;
		var h = 0;
		while(true) {
			c = file.data.b[p++];
			if(!(c != 10)) {
				break;
			}
			h = c + (h << 7 | h >> 25);
			if(p == file.data.length) {
				++p;
				break;
			}
		}
		var length = p - ip - 1;
		var a = ctx.lookup(h);
		var equivIndex = -1;
		var _g = 0;
		while(_g < a.length) {
			var i = a[_g];
			++_g;
			var equiv = ctx.getEquiv(i);
			if(equiv.hash == h && equiv.length == length && diff_BytesTools.compareSub(file.data,ip,equiv.bytes,equiv.pos,length)) {
				equivIndex = i;
				break;
			}
		}
		if(equivIndex < 0) {
			equivIndex = ctx.addEquiv(new diff__$Io_Equivclass(h,file.data,ip,length));
			a.push(equivIndex);
		}
		cureqs.push(equivIndex);
		file.increaseEquivCount(equivIndex);
		file.addLine(ip,length);
	}
	file.finishLineProcessing(cureqs);
};
diff_Io.readFiles = function(ctx) {
	diff_Io.findIdenticalEnds(ctx);
	var ioctx = new diff__$Io_IoContext();
	diff_Io.findAndHashEachLine(ioctx,ctx.file1);
	diff_Io.findAndHashEachLine(ioctx,ctx.file2);
};
var diff_Printer = function() { };
diff_Printer.__name__ = true;
diff_Printer.printContextLabel = function(mark,file) {
	var buf_b = "";
	buf_b = "" + (mark == null ? "null" : "" + mark);
	buf_b += " ";
	buf_b += Std.string(file.label);
	buf_b += "\t";
	buf_b += Std.string(HxOverrides.dateStr(file.mtime));
	buf_b += "\n";
	return buf_b;
};
diff_Printer.printContextHeader = function(ctx) {
	var buf_b = "";
	buf_b = "" + Std.string(diff_Printer.printContextLabel("---",ctx.file1));
	buf_b += Std.string(diff_Printer.printContextLabel("+++",ctx.file2));
	return buf_b;
};
diff_Printer.translateLineNumber = function(file,a) {
	return file.prefixNewlines + a + 1;
};
diff_Printer.printUnidiffNumberRange = function(file,a,b) {
	var transA = diff_Printer.translateLineNumber(file,a - 1) + 1;
	var transB = diff_Printer.translateLineNumber(file,b + 1) - 1;
	if(transB == transA) {
		return "" + transB + ",0";
	} else if(transB - transA == 1) {
		return "1";
	} else {
		return "" + transA + "," + (transB - transA);
	}
};
diff_Printer.printUnidiffHunk = function(ctx,change) {
	var buf_b = "";
	var from0 = change.line0 - ctx.context;
	if(from0 < 0) {
		from0 = 0;
	}
	var from1 = change.line1 - ctx.context;
	if(from1 < 0) {
		from1 = 0;
	}
	var next = change;
	while(next.next != null) next = next.next;
	var last = next;
	var to0 = last.line0 + last.deleted + ctx.context;
	if(to0 >= ctx.file1.lines.length) {
		to0 = ctx.file1.lines.length;
	}
	var to1 = last.line1 + last.inserted + ctx.context;
	if(to1 >= ctx.file2.lines.length) {
		to1 = ctx.file2.lines.length;
	}
	buf_b += "@@ -";
	buf_b += Std.string(diff_Printer.printUnidiffNumberRange(ctx.file1,from0,to0));
	buf_b += " +";
	buf_b += Std.string(diff_Printer.printUnidiffNumberRange(ctx.file2,from1,to1));
	buf_b += " @@\n";
	var printLine = function(file,prefix,i) {
		var line = file.lines[i];
		buf_b += prefix == null ? "null" : "" + prefix;
		buf_b = (buf_b += Std.string(file.data.sub(line.pos,line.length).toString())) + String.fromCodePoint(10);
	};
	var i = from0;
	var j = from1;
	while(i < to0 || j < to1) if(change == null || i < change.line0) {
		printLine(ctx.file1," ",i);
		++i;
		++j;
	} else {
		var _g = 0;
		var _g1 = change.deleted;
		while(_g < _g1) {
			_g++;
			printLine(ctx.file1,"-",i++);
		}
		var _g2 = 0;
		var _g3 = change.inserted;
		while(_g2 < _g3) {
			_g2++;
			printLine(ctx.file2,"+",j++);
		}
		change = change.next;
	}
	return buf_b;
};
diff_Printer.findHunk = function(ctx,change) {
	var threshold = ctx.context * 2 + 1;
	var previousChange = change;
	while(true) {
		change = change.next;
		if(!(change != null)) {
			break;
		}
		if(change.line0 - (previousChange.line0 + previousChange.deleted) < threshold) {
			previousChange = change;
			continue;
		}
		break;
	}
	return previousChange;
};
diff_Printer.printUnidiff = function(ctx,change) {
	var buf_b = "";
	buf_b = "" + Std.string(diff_Printer.printContextHeader(ctx));
	var next = change;
	while(next != null) {
		var end = diff_Printer.findHunk(ctx,next);
		var cur = next;
		next = end.next;
		end.next = null;
		buf_b += Std.string(diff_Printer.printUnidiffHunk(ctx,cur));
	}
	return buf_b;
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:true,__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Module",$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="FilePos",$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Method",$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="LocalFunction",$_.__params__ = ["v"],$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function(fullStack) {
	if(fullStack == null) {
		fullStack = false;
	}
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return fullStack ? eStack : haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = stack;
	while(_g < _g1.length) {
		var s = _g1[_g++];
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) if(haxe_CallStack.equalItems(this1[i],stack[_g++])) {
			if(startIndex < 0) {
				startIndex = i;
			}
			++i;
			if(i >= this1.length) {
				break;
			}
		} else {
			startIndex = -1;
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				return item1.m == item2.m;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				if(item1.file == item2.file && item1.line == item2.line && item1.column == item2.column) {
					return haxe_CallStack.equalItems(item1.s,item2.s);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				if(item1.classname == item2.classname) {
					return item1.method == item2.method;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				return item1.v == item2.v;
			} else {
				return false;
			}
			break;
		}
	}
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var _g = s.m;
		b.b = (b.b += "module ") + (_g == null ? "null" : "" + _g);
		break;
	case 2:
		var _g = s.s;
		var _g1 = s.file;
		var _g2 = s.line;
		var _g3 = s.column;
		if(_g != null) {
			haxe_CallStack.itemToString(b,_g);
			b.b += " (";
		}
		b.b = (b.b += _g1 == null ? "null" : "" + _g1) + " line ";
		b.b += _g2 == null ? "null" : "" + _g2;
		if(_g3 != null) {
			b.b = (b.b += " column ") + (_g3 == null ? "null" : "" + _g3);
		}
		if(_g != null) {
			b.b += ")";
		}
		break;
	case 3:
		var _g = s.classname;
		var _g1 = s.method;
		b.b = (b.b += Std.string(_g == null ? "<unknown>" : _g)) + ".";
		b.b += _g1 == null ? "null" : "" + _g1;
		break;
	case 4:
		var _g = s.v;
		b.b = (b.b += "local function #") + (_g == null ? "null" : "" + _g);
		break;
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
	this.__skipStack = 0;
	var old = Error.prepareStackTrace;
	Error.prepareStackTrace = function(e) { return e.stack; }
	if(((native) instanceof Error)) {
		this.stack = native.stack;
	} else {
		var e = null;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,haxe_Exception);
			e = this;
		} else {
			e = new Error();
			if(typeof(e.stack) == "undefined") {
				try { throw e; } catch(_) {}
				this.__skipStack++;
			}
		}
		this.stack = e.stack;
	}
	Error.prepareStackTrace = old;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		e.__skipStack++;
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,__shiftStack: function() {
		this.__skipStack++;
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,get_stack: function() {
		var _g = this.__exceptionStack;
		if(_g == null) {
			var value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			return _g;
		}
	}
	,setProperty: function(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
});
var haxe_NativeStackTrace = function() { };
haxe_NativeStackTrace.__name__ = true;
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([$A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				method = haxe_StackItem.Method(fullName.substring(0,idx),fullName.substring(idx + 1));
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	while(true) if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			skip = --skip;
			pos += 1;
			continue;
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__skipStack++;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = true;
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
};
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
	this.__skipStack++;
};
haxe_exceptions_PosException.__name__ = true;
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
});
var haxe_exceptions_NotImplementedException = function(message,previous,pos) {
	if(message == null) {
		message = "Not implemented";
	}
	haxe_exceptions_PosException.call(this,message,previous,pos);
	this.__skipStack++;
};
haxe_exceptions_NotImplementedException.__name__ = true;
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_NotImplementedException.prototype = $extend(haxe_exceptions_PosException.prototype,{
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var code1 = (c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
haxe_io_BytesBuffer.__name__ = true;
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addInt32: function(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setInt32(this.pos,v,true);
		this.pos += 4;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
haxe_io_BytesOutput.__name__ = true;
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = true;
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < paths.length) {
		var v = paths[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	if(_g.length == 0) {
		return "";
	}
	var path = _g[0];
	var _g1 = 1;
	var _g2 = _g.length;
	while(_g1 < _g2) {
		path = haxe_io_Path.addTrailingSlash(path);
		path += _g[_g1++];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g_offset = 0;
	var _g_s = target.join(slash);
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var haxeLanguageServer_documents_HxTextDocument = function(uri,languageId,version,content) {
	this.onUpdateListeners = [];
	this.uri = uri;
	this.languageId = languageId;
	var hrtime = process.hrtime();
	this.openTimestamp = hrtime[0] + hrtime[1] / 1e9;
	this.version = version;
	this.content = content;
};
haxeLanguageServer_documents_HxTextDocument.__name__ = true;
haxeLanguageServer_documents_HxTextDocument.prototype = {
	update: function(events,version) {
		var _g = 0;
		var _g1 = this.onUpdateListeners;
		while(_g < _g1.length) _g1[_g++](this,events,version);
		this.version = version;
		var _g = 0;
		while(_g < events.length) {
			var event = events[_g];
			++_g;
			if(event.range == null) {
				this.content = event.text;
				this.lineOffsets = null;
			} else {
				var startOffset = this.offsetAt(event.range.start);
				var endOffset = this.offsetAt(event.range.end);
				this.content = this.content.substring(0,startOffset) + event.text + this.content.substring(endOffset);
				var startLine = Math.max(event.range.start.line,0) | 0;
				var endLine = Math.max(event.range.end.line,0) | 0;
				var addedLineOffsets = this.computeLineOffsets(event.text,false,startOffset);
				if(endLine - startLine == addedLineOffsets.length) {
					var _g1 = 0;
					var _g2 = addedLineOffsets.length;
					while(_g1 < _g2) {
						var i = _g1++;
						var value = this.lineOffsets;
						if(value == null) {
							throw new safety_NullPointerException("Null pointer in .sure() call");
						}
						value[i + startLine + 1] = addedLineOffsets[i];
					}
				} else {
					var value1 = this.lineOffsets;
					if(value1 == null) {
						throw new safety_NullPointerException("Null pointer in .sure() call");
					}
					var tmp = value1.slice(0,startLine + 1).concat(addedLineOffsets);
					var value2 = this.lineOffsets;
					if(value2 == null) {
						throw new safety_NullPointerException("Null pointer in .sure() call");
					}
					this.lineOffsets = tmp.concat(value2.slice(endLine + 1));
				}
				var diff = event.text.length - (endOffset - startOffset);
				if(diff != 0) {
					var _g3 = startLine + 1 + addedLineOffsets.length;
					var value3 = this.lineOffsets;
					if(value3 == null) {
						throw new safety_NullPointerException("Null pointer in .sure() call");
					}
					var _g4 = value3.length;
					while(_g3 < _g4) {
						var i1 = _g3++;
						var value4 = this.lineOffsets;
						if(value4 == null) {
							throw new safety_NullPointerException("Null pointer in .sure() call");
						}
						var value5 = this.lineOffsets;
						if(value5 == null) {
							throw new safety_NullPointerException("Null pointer in .sure() call");
						}
						value4[i1] = value5[i1] + diff;
					}
				}
			}
		}
	}
	,positionAt: function(offset,offsetKind) {
		if(offsetKind == null) {
			offsetKind = 1;
		}
		if(offsetKind == 0) {
			offset = this.utf8Offset(this.content,offset,1);
		}
		offset = Math.max(Math.min(offset,this.content.length),0) | 0;
		var lineOffsets = this.getLineOffsets();
		var low = 0;
		var high = lineOffsets.length;
		if(high == 0) {
			return { line : 0, character : offset};
		}
		while(low < high) {
			var mid = (low + high) / 2 | 0;
			if(lineOffsets[mid] > offset) {
				high = mid;
			} else {
				low = mid + 1;
			}
		}
		var line = low - 1;
		return { line : line, character : offset - lineOffsets[line]};
	}
	,lineRangeAt: function(offsetInLine) {
		var start = this.positionAt(offsetInLine);
		var line = this.lineAt(start.line);
		return { start : { line : start.line, character : 0}, end : { line : start.line, character : StringTools.rtrim(line).length}};
	}
	,lineAt: function(line) {
		var lineOffsets = this.getLineOffsets();
		if(line >= lineOffsets.length) {
			return "";
		} else if(line == lineOffsets.length - 1) {
			return this.content.substring(lineOffsets[line]);
		} else {
			return this.content.substring(lineOffsets[line],lineOffsets[line + 1]);
		}
	}
	,offsetAt: function(position) {
		var lineOffsets = this.getLineOffsets();
		if(position.line >= lineOffsets.length) {
			return this.content.length;
		} else if(position.line < 0) {
			return 0;
		}
		var lineOffset = lineOffsets[position.line];
		return Math.max(Math.min(lineOffset + position.character,position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this.content.length),lineOffset) | 0;
	}
	,indentAt: function(line) {
		var re = new EReg("^\\s*","");
		re.match(this.lineAt(line));
		return re.matched(0);
	}
	,getText: function(range) {
		if(range == null) {
			return this.content;
		}
		return this.content.substring(this.offsetAt(range.start),this.offsetAt(range.end));
	}
	,characterAt: function(pos) {
		return this.getText({ start : pos, end : { line : pos.line, character : pos.character + 1}});
	}
	,addUpdateListener: function(listener) {
		this.onUpdateListeners.push(listener);
	}
	,removeUpdateListener: function(listener) {
		HxOverrides.remove(this.onUpdateListeners,listener);
	}
	,getLineOffsets: function() {
		if(this.lineOffsets == null) {
			this.lineOffsets = this.computeLineOffsets(this.content,true);
		}
		return this.lineOffsets;
	}
	,computeLineOffsets: function(text,isLineStart,offset) {
		if(offset == null) {
			offset = 0;
		}
		var offsets = isLineStart ? [offset] : [];
		var i = 0;
		while(i < text.length) {
			var ch = HxOverrides.cca(text,i);
			if(ch == 13 && i + 1 < text.length && HxOverrides.cca(text,i + 1) == 10) {
				++i;
			}
			++i;
			if(ch == 13 || ch == 10) {
				offsets.push(offset + i);
			}
		}
		return offsets;
	}
	,get_lineCount: function() {
		return this.getLineOffsets().length;
	}
	,utf8Offset: function(string,offset,direction) {
		var ret = offset;
		var i = 0;
		var j = 0;
		while(j < string.length && i < offset) {
			var value = HxOverrides.cca(string,j);
			if(value == null) {
				throw new safety_NullPointerException("Null pointer in .sure() call");
			}
			if(!(value >= 0 && value <= 127)) {
				if(value >= 128 && value <= 2047) {
					ret -= direction;
				} else if(value >= 55296 && value < 56320) {
					ret -= direction * 2;
					++j;
				} else if(value >= 2048 && value <= 65535) {
					ret -= direction * 2;
				} else if(value >= 65536 && value <= 1114111) {
					ret -= direction * 3;
				}
			}
			++i;
			++j;
		}
		return ret;
	}
};
function haxeLanguageServer_extensions_DocumentUriExtensions_toFsPath(uri) {
	if(!haxeLanguageServer_extensions_DocumentUriExtensions_uriRe.match(uri) || haxeLanguageServer_extensions_DocumentUriExtensions_uriRe.matched(2) != "file") {
		throw haxe_Exception.thrown("Invalid uri: " + (uri == null ? "null" : uri));
	}
	var s = haxeLanguageServer_extensions_DocumentUriExtensions_uriRe.matched(5);
	var path = decodeURIComponent(s.split("+").join(" "));
	if(haxeLanguageServer_extensions_DocumentUriExtensions_driveLetterPathRe.match(path)) {
		return path.charAt(1).toLowerCase() + HxOverrides.substr(path,2,null);
	} else {
		return path;
	}
}
function haxeLanguageServer_extensions_DocumentUriExtensions_isFile(uri) {
	return StringTools.startsWith(uri,"file://");
}
function haxeLanguageServer_extensions_DocumentUriExtensions_isUntitled(uri) {
	return StringTools.startsWith(uri,"untitled:");
}
function haxeLanguageServer_extensions_DocumentUriExtensions_isHaxeFile(uri) {
	return StringTools.endsWith(uri,".hx");
}
function haxeLanguageServer_extensions_DocumentUriExtensions_isHxmlFile(uri) {
	return StringTools.endsWith(uri,".hxml");
}
var haxeLanguageServer_extensions_PositionStatics = function() { };
haxeLanguageServer_extensions_PositionStatics.__name__ = true;
haxeLanguageServer_extensions_PositionStatics.Min = function(pos1,pos2) {
	if(haxeLanguageServer_extensions_PositionExtensions_isBefore(pos1,pos2)) {
		return pos1;
	} else {
		return pos2;
	}
};
haxeLanguageServer_extensions_PositionStatics.Max = function(pos1,pos2) {
	if(haxeLanguageServer_extensions_PositionExtensions_isAfter(pos1,pos2)) {
		return pos1;
	} else {
		return pos2;
	}
};
function haxeLanguageServer_extensions_PositionExtensions_isBefore(pos,other) {
	if(pos.line < other.line) {
		return true;
	}
	if(other.line < pos.line) {
		return false;
	}
	return pos.character < other.character;
}
function haxeLanguageServer_extensions_PositionExtensions_isBeforeOrEqual(pos,other) {
	if(pos.line < other.line) {
		return true;
	}
	if(other.line < pos.line) {
		return false;
	}
	return pos.character <= other.character;
}
function haxeLanguageServer_extensions_PositionExtensions_isAfter(pos,other) {
	return !haxeLanguageServer_extensions_PositionExtensions_isBeforeOrEqual(pos,other);
}
function haxeLanguageServer_extensions_PositionExtensions_isAfterOrEqual(pos,other) {
	return !haxeLanguageServer_extensions_PositionExtensions_isBefore(pos,other);
}
function haxeLanguageServer_extensions_PositionExtensions_isEqual(pos,other) {
	if(pos.line == other.line) {
		return pos.character == other.character;
	} else {
		return false;
	}
}
function haxeLanguageServer_extensions_PositionExtensions_compareTo(pos,other) {
	if(pos.line < other.line) {
		return -1;
	} else if(pos.line > other.line) {
		return 1;
	} else if(pos.character < other.character) {
		return -1;
	} else if(pos.character > other.character) {
		return 1;
	} else {
		return 0;
	}
}
function haxeLanguageServer_extensions_PositionExtensions_translate(pos,lineDelta,characterDelta) {
	return { line : pos.line + lineDelta, character : pos.character + characterDelta};
}
function haxeLanguageServer_extensions_PositionExtensions_translatePos(pos,other) {
	return { line : pos.line + other.line, character : pos.character + other.character};
}
function haxeLanguageServer_extensions_PositionExtensions_with(pos,line,character) {
	return { line : line == null ? pos.line : line, character : character == null ? pos.character : character};
}
function haxeLanguageServer_extensions_PositionExtensions_toRange(pos) {
	return { start : pos, end : pos};
}
var haxeserver_HaxeServerBase = function(createProcess,isAsynchronous) {
	this.requestId = 0;
	this.defaultRequestArguments = [];
	this.createProcess = createProcess;
	this.isAsynchronous = isAsynchronous;
	this.start();
};
haxeserver_HaxeServerBase.__name__ = true;
haxeserver_HaxeServerBase.prototype = {
	start: function() {
		if(this.process != null) {
			this.process.close();
		}
		this.process = this.createProcess();
		if(this.process.isAsynchronous() && !this.isAsynchronous) {
			throw haxe_Exception.thrown("Cannot use synchronous haxe server with asynchronous process");
		}
	}
	,stop: function(graceful,callback) {
		if(graceful == null) {
			graceful = true;
		}
		if(this.process != null) {
			this.process.close(graceful,callback);
			this.process = null;
		}
	}
	,setDefaultRequestArguments: function($arguments) {
		this.defaultRequestArguments = $arguments;
	}
	,close: function() {
		this.process.close();
	}
};
var haxeserver_HaxeServerAsync = function(createProcess) {
	haxeserver_HaxeServerBase.call(this,createProcess,true);
};
haxeserver_HaxeServerAsync.__name__ = true;
haxeserver_HaxeServerAsync.launch = function(command,$arguments) {
	return new haxeserver_HaxeServerAsync(function() {
		return new haxeserver_process_HaxeServerProcessNode(command,$arguments);
	});
};
haxeserver_HaxeServerAsync.__super__ = haxeserver_HaxeServerBase;
haxeserver_HaxeServerAsync.prototype = $extend(haxeserver_HaxeServerBase.prototype,{
	rawRequest: function($arguments,stdin,callback,errback) {
		$arguments = this.defaultRequestArguments.concat($arguments);
		if(stdin != null) {
			$arguments = $arguments.concat(["-D","display-stdin"]);
		}
		this.process.request($arguments,stdin,function(res) {
			callback(res);
		},function(err) {
			errback(err);
		});
	}
});
var haxeserver_process_HaxeServerProcessBase = function() { };
haxeserver_process_HaxeServerProcessBase.__name__ = true;
haxeserver_process_HaxeServerProcessBase.prototype = {
	processResult: function(stderr,stdout) {
		var buf_b = "";
		var currentLine = new StringBuf();
		var prints = [];
		var newLine = true;
		var hasError = false;
		var inPrint = false;
		var commitLine = function() {
			var line = currentLine.b;
			if(inPrint) {
				prints.push(line);
				inPrint = false;
			} else {
				buf_b += line == null ? "null" : "" + line;
			}
			currentLine = new StringBuf();
		};
		var _g = 0;
		var _g1 = stderr.length;
		while(_g < _g1) {
			var byte = stderr.b[_g++];
			switch(byte) {
			case 1:
				if(inPrint) {
					commitLine();
				}
				inPrint = true;
				break;
			case 2:
				hasError = true;
				break;
			case 10:
				currentLine.b += String.fromCodePoint(byte);
				commitLine();
				newLine = true;
				break;
			default:
				currentLine.b += String.fromCodePoint(byte);
			}
		}
		commitLine();
		return { hasError : hasError, prints : prints, stdout : stdout.getString(0,stdout.length), stderr : buf_b, stderrRaw : stderr};
	}
	,prepareInput: function($arguments,stdin) {
		var out = new haxe_io_BytesOutput();
		var _g = 0;
		while(_g < $arguments.length) {
			out.writeString($arguments[_g++]);
			out.writeByte(10);
		}
		if(stdin != null) {
			out.writeByte(1);
			out.write(stdin);
		}
		var buf = new haxe_io_BytesBuffer();
		buf.addInt32(out.b.pos);
		buf.add(out.getBytes());
		return buf.getBytes();
	}
};
var haxeserver_process_HaxeServerProcessConnect = function(haxeCmd,port,baseArguments) {
	this.haxeCmd = haxeCmd;
	this.baseArguments = ["--connect","" + port].concat(baseArguments);
};
haxeserver_process_HaxeServerProcessConnect.__name__ = true;
haxeserver_process_HaxeServerProcessConnect.prototype = {
	isAsynchronous: function() {
		return false;
	}
	,request: function($arguments,stdin,callback,errback) {
		console.log("haxeserver/process/HaxeServerProcessConnect.hx:41:",$arguments);
		var p = js_node_ChildProcess.spawnSync(this.haxeCmd,this.baseArguments.concat($arguments));
		var stderr = p.stderr;
		callback({ hasError : p.status != 0, stdout : p.stdout.toString(), stderr : stderr.toString(), stderrRaw : null, prints : []});
	}
	,close: function(graceful,callback) {
		if(graceful == null) {
			graceful = true;
		}
		if(callback != null) {
			callback();
		}
	}
};
var haxeserver_process__$HaxeServerProcessNode_RequestCallback = function(stdin,callback,errback) {
	this.stdin = stdin;
	this.callback = callback;
	this.errback = errback;
	this.active = false;
};
haxeserver_process__$HaxeServerProcessNode_RequestCallback.__name__ = true;
haxeserver_process__$HaxeServerProcessNode_RequestCallback.prototype = {
	append: function(requestCallback) {
		if(this.next == null) {
			this.next = requestCallback;
		} else {
			this.next.append(requestCallback);
		}
	}
	,setActive: function() {
		this.active = true;
	}
};
var js_node_buffer_Buffer = require("buffer").Buffer;
var haxeserver_process_HaxeServerProcessNode = function(command,$arguments,options,done) {
	var _gthis = this;
	this.reset();
	var server = js_node_Net.createServer();
	server.listen(0,function() {
		var port = server.address().port;
		var command1 = command;
		var tmp = $arguments.concat(["--server-connect","127.0.0.1:" + port]);
		_gthis.process = js_node_ChildProcess.spawn(command1,tmp,options == null ? { } : options);
		server.on("connection",function(socket) {
			server.close();
			socket.on("data",$bind(_gthis,_gthis.handleOnStderr));
			_gthis.process.stdout.on("data",$bind(_gthis,_gthis.handleOnStdout));
			_gthis.process.on("exit",$bind(_gthis,_gthis.handleOnExit));
			_gthis.socket = socket;
			if(done != null) {
				done();
			}
		});
	});
};
haxeserver_process_HaxeServerProcessNode.__name__ = true;
haxeserver_process_HaxeServerProcessNode.__super__ = haxeserver_process_HaxeServerProcessBase;
haxeserver_process_HaxeServerProcessNode.prototype = $extend(haxeserver_process_HaxeServerProcessBase.prototype,{
	isAsynchronous: function() {
		return true;
	}
	,request: function($arguments,stdin,callback,errback) {
		var request = new haxeserver_process__$HaxeServerProcessNode_RequestCallback(this.prepareInput($arguments,stdin),callback,errback);
		if(this.requests == null) {
			this.requests = request;
		} else {
			this.requests.append(request);
		}
		this.checkRequestQueue();
	}
	,onExit: function(callback) {
		this.onExitCallbacks.push(callback);
	}
	,close: function(graceful,callback) {
		if(graceful == null) {
			graceful = true;
		}
		if(callback != null) {
			this.onCloseCallbacks.push(callback);
		}
		if(graceful && this.requests != null && this.requests.active) {
			this.closeRequested = true;
		} else {
			this.reset();
		}
	}
	,reset: function() {
		while(this.requests != null) {
			this.requests.errback("Process closed");
			this.requests = this.requests.next;
		}
		if(this.onCloseCallbacks != null) {
			var _g = 0;
			var _g1 = this.onCloseCallbacks;
			while(_g < _g1.length) _g1[_g++]();
		}
		if(this.process != null) {
			this.process.removeAllListeners();
			this.process.kill();
			this.process = null;
		}
		if(this.socket != null) {
			this.socket.destroy();
		}
		this.onCloseCallbacks = [];
		this.onExitCallbacks = [];
		this.stderrBuffer = js_node_buffer_Buffer.alloc(0);
		this.stdoutBuffer = js_node_buffer_Buffer.alloc(0);
		this.closeRequested = false;
	}
	,checkRequestQueue: function() {
		if(this.closeRequested) {
			this.reset();
			return;
		}
		if(this.requests != null && !this.requests.active) {
			this.requests.setActive();
			var b = this.requests.stdin;
			var data = b.b;
			this.socket.write(js_node_buffer_Buffer.from(data.buffer,data.byteOffset,b.length));
		}
	}
	,handleOnStderr: function(data) {
		if(data.length == 0) {
			return;
		}
		this.stderrBuffer = js_node_buffer_Buffer.concat([this.stderrBuffer,data]);
		this.processBuffer();
	}
	,handleOnStdout: function(data) {
		if(this.requests != null) {
			this.stdoutBuffer = js_node_buffer_Buffer.concat([this.stdoutBuffer,data]);
		}
	}
	,handleOnExit: function(code,msg) {
		while(this.requests != null) {
			this.requests.errback("Process exited with code " + code + ": " + msg);
			this.requests = this.requests.next;
		}
		var stderr = this.stderrBuffer.toString();
		var _g = 0;
		var _g1 = this.onExitCallbacks;
		while(_g < _g1.length) _g1[_g++](stderr);
	}
	,processBuffer: function() {
		if(this.response == null) {
			if(this.stderrBuffer.length < 4) {
				return;
			}
			var length = this.stderrBuffer.readInt32LE(0);
			this.stderrBuffer = this.stderrBuffer.slice(4);
			this.response = { length : length, buffer : js_node_buffer_Buffer.alloc(length), index : 0};
		}
		var length = Math.min(this.stderrBuffer.length,this.response.length - this.response.index) | 0;
		this.stderrBuffer.copy(this.response.buffer,this.response.index,0,length);
		this.stderrBuffer = this.stderrBuffer.slice(length);
		this.response.index += length;
		if(this.response.index == this.response.length) {
			while(this.process.stdout.readable) {
				var read = this.process.stdout.read();
				if(read == null) {
					break;
				}
				this.handleOnStdout(read);
			}
			var result = this.processResult(js_node_buffer__$Buffer_Helper.bytesOfBuffer(this.response.buffer),js_node_buffer__$Buffer_Helper.bytesOfBuffer(this.stdoutBuffer));
			this.stdoutBuffer = js_node_buffer_Buffer.alloc(0);
			this.requests.callback(result);
			this.requests = this.requests.next;
			this.response = null;
			this.checkRequestQueue();
		}
	}
});
var haxeserver_repro_Extractor = {};
haxeserver_repro_Extractor._new = function(r) {
	return r;
};
haxeserver_repro_Extractor.init = function() {
	return haxeserver_repro_Extractor._new(new EReg("^(?:\\+(\\d+(?:\\.\\d+)?)s )?(>|<|-|#) (\\w+)(?: (\\d+))?(?: \"([^\"]+)\")?(?: (.+))?$",""));
};
haxeserver_repro_Extractor.get_delta = function(this1) {
	var raw = this1.matched(1);
	if(raw == null) {
		return null;
	}
	return parseFloat(raw);
};
haxeserver_repro_Extractor.get_kind = function(this1) {
	return this1.matched(2);
};
haxeserver_repro_Extractor.get_entry = function(this1) {
	return this1.matched(3);
};
haxeserver_repro_Extractor.get_id = function(this1) {
	var raw = this1.matched(4);
	if(raw == null) {
		return null;
	}
	return Std.parseInt(raw);
};
haxeserver_repro_Extractor.get_method = function(this1) {
	return this1.matched(5);
};
haxeserver_repro_Extractor.get_rest = function(this1) {
	return this1.matched(6);
};
haxeserver_repro_Extractor.getSimplifiedLine = function(this1) {
	var buf_b = "";
	buf_b = "" + Std.string(haxeserver_repro_Extractor.get_kind(this1));
	buf_b += " ";
	buf_b += Std.string(haxeserver_repro_Extractor.get_entry(this1));
	if(haxeserver_repro_Extractor.get_id(this1) != null) {
		buf_b += " ";
		buf_b += Std.string(haxeserver_repro_Extractor.get_id(this1));
	}
	if(haxeserver_repro_Extractor.get_method(this1) != null) {
		buf_b += " \"";
		buf_b += Std.string(haxeserver_repro_Extractor.get_method(this1));
		buf_b += "\"";
	}
	if(haxeserver_repro_Extractor.get_rest(this1) != null) {
		buf_b += " ";
		buf_b += Std.string(haxeserver_repro_Extractor.get_rest(this1));
	}
	return buf_b;
};
function haxeserver_repro_ReplayAction_main() {
	var cwd = actions_Core.getInput("cwd");
	if(cwd != null) {
		process.chdir(cwd);
	}
	var path = actions_Core.getInput("path");
	var silent = actions_Core.getBooleanInput("silent");
	var noWatchers = actions_Core.getBooleanInput("no-watchers");
	var filename = actions_Core.getInput("file");
	new haxeserver_repro_ReplayRecording(path,silent,true,noWatchers,true,null,filename).run();
}
var haxeserver_repro_ReplayRecording = function(path,silent,noInteractive,noWatchers,logTimes,port,filename) {
	if(filename == null) {
		filename = "repro.log";
	}
	if(logTimes == null) {
		logTimes = false;
	}
	if(noWatchers == null) {
		noWatchers = false;
	}
	if(noInteractive == null) {
		noInteractive = false;
	}
	if(silent == null) {
		silent = false;
	}
	this.extractor = haxeserver_repro_Extractor.init();
	this.aborted = false;
	this.timers = new haxe_ds_StringMap();
	this.times = new haxe_ds_StringMap();
	this.assertions = new haxe_ds_IntMap();
	this.currentAssert = haxeserver_repro_Assertion.None;
	this.displayNextTimings = false;
	this.displayNextResponse = false;
	this.abortOnFailure = false;
	this.stepping = false;
	this.muted = false;
	this.running = false;
	this.lineNumber = 0;
	this.protocolVersion = 1.0;
	this.filename = "repro.log";
	this.port = null;
	this.logTimes = false;
	this.noWatchers = false;
	this.noInteractive = false;
	this.silent = false;
	this.createdStash = false;
	this.vcsStatus = haxeserver_repro_VcsStatus.None;
	this.root = "./";
	this.path = path;
	this.silent = silent;
	this.noInteractive = noInteractive;
	this.noWatchers = noWatchers;
	this.logTimes = logTimes;
	this.port = port;
	var filepath = haxe_io_Path.join([path,filename]);
	if(!sys_FileSystem.exists(filepath) || sys_FileSystem.isDirectory(filepath)) {
		console.error("Invalid recording file provided, skipping replay.");
		process.exit(1);
	}
	this.file = new sys_io_FileInput(js_node_Fs.openSync(filepath,"r"));
};
haxeserver_repro_ReplayRecording.__name__ = true;
haxeserver_repro_ReplayRecording.plural = function(nb) {
	if(nb != 1) {
		return "s";
	} else {
		return "";
	}
};
haxeserver_repro_ReplayRecording.main = function() {
	var path = null;
	var silent = false;
	var noInteractive = false;
	var noWatchers = false;
	var logTimes = false;
	var port = null;
	var filename = null;
	var handler_getDoc = function() {
		return "[--path] <p>       : Path to the recording directory (mandatory)\n[--file] <f>       : Log file to use in the recording directory. Default is `repro.log`.\n[--port] <p>       : Port to use internally for haxe server. Should *not* refer to an existing server. Default is `7000`.\n[--no-watchers]    : This recording was made without filesystem watchers.\n[--no-interactive] : Skip all prompts.\n[--silent]         : Only show results.\n[--times]          : Log timing per request type.";
	};
	var handler_parse = function(__args) {
		var __index = 0;
		while(__index < __args.length) {
			var _g = __args[__index++];
			switch(_g) {
			case "--file":
				if(__index + 1 > __args.length) {
					if(![false][__args.length - 1]) {
						throw haxe_Exception.thrown("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 1);
					}
				}
				filename = __args[__index];
				++__index;
				break;
			case "--no-interactive":
				if(__index > __args.length) {
					if(![][__args.length - 1]) {
						throw haxe_Exception.thrown("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 0);
					}
				}
				noInteractive = true;
				__index += 0;
				break;
			case "--no-watchers":
				if(__index > __args.length) {
					if(![][__args.length - 1]) {
						throw haxe_Exception.thrown("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 0);
					}
				}
				noWatchers = true;
				__index += 0;
				break;
			case "--path":
				if(__index + 1 > __args.length) {
					if(![false][__args.length - 1]) {
						throw haxe_Exception.thrown("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 1);
					}
				}
				path = __args[__index];
				++__index;
				break;
			case "--port":
				if(__index + 1 > __args.length) {
					if(![false][__args.length - 1]) {
						throw haxe_Exception.thrown("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 1);
					}
				}
				port = Std.parseInt(__args[__index]);
				++__index;
				break;
			case "--silent":
				if(__index > __args.length) {
					if(![][__args.length - 1]) {
						throw haxe_Exception.thrown("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 0);
					}
				}
				silent = true;
				__index += 0;
				break;
			case "--times":
				if(__index > __args.length) {
					if(![][__args.length - 1]) {
						throw haxe_Exception.thrown("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 0);
					}
				}
				logTimes = true;
				__index += 0;
				break;
			default:
				process.stdout.write(Std.string("Unknown argument " + _g));
				process.stdout.write("\n");
				process.exit(1);
			}
		}
	};
	var args = process.argv.slice(2);
	if(args.length == 0) {
		var v = handler_getDoc();
		process.stdout.write(Std.string(v));
		process.stdout.write("\n");
		return;
	}
	handler_parse(args);
	if(path == null || path == "") {
		var v = handler_getDoc();
		process.stdout.write(Std.string(v));
		process.stdout.write("\n");
		process.exit(1);
	}
	if(!sys_FileSystem.exists(path) || !sys_FileSystem.isDirectory(path)) {
		console.error("Invalid recording path provided, skipping replay.");
		process.exit(1);
	}
	new haxeserver_repro_ReplayRecording(path,silent,noInteractive,noWatchers,logTimes,port,filename).run();
};
haxeserver_repro_ReplayRecording.prototype = {
	get_started: function() {
		return this.client != null;
	}
	,run: function() {
		if(this.running) {
			throw haxe_Exception.thrown("Replay already started.");
		}
		this.running = true;
		this.next();
	}
	,start: function(cb) {
		if(this.port == null) {
			this.server = null;
			var $process = null;
			$process = new haxeserver_process_HaxeServerProcessNode("haxe",[],null,cb);
			this.client = new haxeserver_HaxeServerAsync(function() {
				return $process;
			});
		} else {
			this.server = js_node_ChildProcess.spawn("haxe",["--wait",Std.string(this.port)]);
			Sys.sleep(0.5);
			var process1 = new haxeserver_process_HaxeServerProcessConnect("haxe",this.port,[]);
			this.client = new haxeserver_HaxeServerAsync(function() {
				return process1;
			});
			cb();
		}
	}
	,pause: function(resume,msg) {
		if(msg == null) {
			msg = "Paused. Press <ENTER> to resume.";
		}
		if(this.aborted || this.noInteractive) {
			resume();
		}
		process.stdout.write(Std.string(msg + " "));
		if(new _$Sys_FileInput(0).readLine() == "q") {
			this.cleanup();
			this.exit(0);
			return;
		}
		resume();
	}
	,done: function() {
		var _gthis = this;
		var exitCode = 0;
		if(this.assertions.iterator().hasNext()) {
			var nb = 0;
			var nbFail = 0;
			var detailed_b = "";
			var summary_b = "";
			var this1 = this.assertions;
			var _g_keys = this1.keys();
			while(_g_keys.hasNext()) {
				var key = _g_keys.next();
				var _g_value = this1.get(key);
				++nb;
				summary_b += Std.string(_g_value.success ? "." : "F");
				if(!_g_value.success) {
					++nbFail;
					detailed_b += Std.string("" + key + ": assertion failed " + Std.string(_g_value.assert) + " at line " + _g_value.lineApplied + "\n");
				}
			}
			var v = "" + nb + " assertion" + haxeserver_repro_ReplayRecording.plural(nb) + " with " + nbFail + " failure" + haxeserver_repro_ReplayRecording.plural(nbFail);
			process.stdout.write(Std.string(v));
			if(nbFail > 0) {
				process.stdout.write(Std.string(": " + summary_b));
			}
			process.stdout.write("");
			process.stdout.write("\n");
			if(!this.silent) {
				process.stdout.write(Std.string(detailed_b));
				process.stdout.write("\n");
			}
			if(nbFail > 0) {
				exitCode = 1;
			}
		}
		if(this.logTimes) {
			this.displayTimingsTable("Replay timings:",this.times);
			var _g = new haxe_ds_StringMap();
			var h = this.timers.h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var timings = Lambda.fold(h[key],function(item,res) {
					return { total : res.total + item.timer.time * 1000, count : res.count + 1, max : Math.max(Math.ceil(item.timer.time * 1000),res.max)};
				},{ total : 0.0, count : 0, max : 0});
				if(timings.total == 0) {
					continue;
				}
				_g.h[key] = timings;
			}
			this.displayTimingsTable("Haxe timers:",_g);
		}
		this.pause(function() {
			_gthis.cleanup();
			process.exit(exitCode);
		},"Done. Press <ENTER> to cleanup and exit.");
	}
	,next: function() {
		var _g = process;
		var callback = $bind(this,this.next);
		var args = [];
		var next = function() {
			_g.nextTick(callback,args);
		};
		if(this.file.eof()) {
			this.done();
			return;
		}
		var line = this.getLine();
		if(line == "") {
			next();
			return;
		}
		var l = this.lineNumber;
		try {
			var _g1 = HxOverrides.cca(line,0);
			if(_g1 == null) {
				if(this.extractor.match(line)) {
					var _g2 = haxeserver_repro_Extractor.get_entry(this.extractor);
					if(haxeserver_repro_Extractor.get_kind(this.extractor) == "#") {
						next();
						return;
					} else {
						switch(_g2) {
						case "abort":
							this.aborted = true;
							this.done();
							break;
						case "abortOnFailure":
							this.abortOnFailure = haxeserver_repro_Extractor.get_id(this.extractor) == null || haxeserver_repro_Extractor.get_id(this.extractor) == 1;
							next();
							break;
						case "addGitUntracked":
							this.println("" + l + ": > Add untracked files");
							this.addGitUntracked(next);
							break;
						case "applyGitPatch":
							this.println("" + l + ": > Apply git patch");
							this.applyGitPatch(next);
							break;
						case "applySvnPatch":
							this.println("" + l + ": > Apply svn patch");
							this.applySvnPatch(next);
							break;
						case "assert":
							this.clearAssert();
							var _g3 = haxeserver_repro_Extractor.get_rest(this.extractor);
							var tmp;
							if(_g3 == null) {
								process.stdout.write(Std.string("" + l + ": Invalid assertion \"" + line + "\""));
								process.stdout.write("\n");
								this.exit(1);
								tmp = haxeserver_repro_Assertion.None;
							} else {
								switch(_g3) {
								case "fail":
									tmp = haxeserver_repro_Assertion.ExpectFailure(l);
									break;
								case "false":
									tmp = this.assertionResult(l,this.aborted,haxeserver_repro_Assertion.ExpectUnreachable(l));
									break;
								case "items":
									tmp = haxeserver_repro_Assertion.ExpectItemCount(l,haxeserver_repro_Extractor.get_id(this.extractor));
									break;
								case "output":
									tmp = haxeserver_repro_Assertion.ExpectOutput(l,this.getFileContent());
									break;
								case "success":
									tmp = haxeserver_repro_Assertion.ExpectSuccess(l);
									break;
								case "true":
									tmp = this.assertionResult(l,!this.aborted,haxeserver_repro_Assertion.ExpectReached(l));
									break;
								}
							}
							this.currentAssert = tmp;
							next();
							break;
						case "checkoutGitRef":
							this.println("" + l + ": > Checkout git ref");
							this.checkoutGitRef(this.getLine(),next);
							break;
						case "checkoutSvnRevision":
							this.println("" + l + ": > Checkout svn revision");
							this.checkoutSvnRevision(this.getLine(),next);
							break;
						case "compilationError":case "compilationResult":
							this.getFileContent();
							next();
							break;
						case "compile":
							if(!this.get_started()) {
								this.println("" + l + ": replay not started yet. Use \"- start\" before sending requests.");
								this.exit(1);
							}
							if(!this.aborted) {
								var data = JSON.parse(this.getLine());
								this.serverRequest(l,null,haxeserver_repro_Extractor.get_method(this.extractor),true,data,next);
							} else {
								this.getLine();
								next();
							}
							break;
						case "didChangeTextDocument":
							var event = this.getData();
							if(this.protocolVersion < 1.1 || this.noWatchers) {
								var start = new Date().getTime();
								this.println("" + l + ": Apply document change to " + haxeLanguageServer_extensions_DocumentUriExtensions_toFsPath(event.textDocument.uri));
								this.didChangeTextDocument(event,next);
								if(this.logTimes) {
									this.logTime("didChangeTextDocument",new Date().getTime() - start);
								}
							} else {
								this.println("" + l + ": Skipped document change event for " + haxeLanguageServer_extensions_DocumentUriExtensions_toFsPath(event.textDocument.uri));
								next();
							}
							break;
						case "displayArguments":
							this.displayArguments = this.getData();
							next();
							break;
						case "displayResponse":
							this.displayNextResponse = true;
							next();
							break;
						case "displayServer":
							this.displayServer = this.getData();
							next();
							break;
						case "displayTimings":
							this.displayNextTimings = true;
							next();
							break;
						case "echo":
							this.println("" + l + ": " + haxeserver_repro_Extractor.get_method(this.extractor));
							next();
							break;
						case "fileChanged":
							var id = haxeserver_repro_Extractor.get_id(this.extractor);
							var content = js_node_Fs.readFileSync(haxe_io_Path.join([this.path,"files","" + id + ".contents"]),{ encoding : "utf8"});
							var path = this.maybeConvertPath(this.getData());
							sys_FileSystem.createDirectory(haxe_io_Path.directory(path));
							js_node_Fs.writeFileSync(path,content);
							next();
							break;
						case "fileCreated":
							var id = haxeserver_repro_Extractor.get_id(this.extractor);
							var content = id == 0 ? "" : js_node_Fs.readFileSync(haxe_io_Path.join([this.path,"files","" + id + ".contents"]),{ encoding : "utf8"});
							var path = this.maybeConvertPath(this.getData());
							sys_FileSystem.createDirectory(haxe_io_Path.directory(path));
							js_node_Fs.writeFileSync(path,content);
							next();
							break;
						case "fileDeleted":
							js_node_Fs.unlinkSync(this.maybeConvertPath(this.getData()));
							next();
							break;
						case "haxe":
							this.getLine();
							next();
							break;
						case "mute":
							this.muted = haxeserver_repro_Extractor.get_id(this.extractor) == null || haxeserver_repro_Extractor.get_id(this.extractor) == 1;
							next();
							break;
						case "pause":
							this.pause(next);
							break;
						case "root":
							this.root = haxe_io_Path.normalize(haxeserver_repro_Extractor.get_method(this.extractor));
							next();
							break;
						case "serverError":
							this.getFileContent();
							next();
							break;
						case "serverLog":
							this.getFileContent();
							next();
							break;
						case "serverRecordingConfig":
							this.config = this.getData();
							if(this.config.version != null) {
								this.protocolVersion = this.config.version;
							}
							next();
							break;
						case "serverRequest":
							if(!this.get_started()) {
								this.println("" + l + ": replay not started yet. Use \"- start\" before sending requests.");
								this.exit(1);
							}
							if(!this.aborted) {
								var line1 = this.getLine();
								var _g3 = HxOverrides.cca(line1,0);
								if(_g3 == null) {
									var data = JSON.parse(line1);
									this.serverRequest(l,haxeserver_repro_Extractor.get_id(this.extractor),haxeserver_repro_Extractor.get_method(this.extractor),false,data,next);
								} else if(_g3 == 123) {
									var data = JSON.parse(line1);
									this.serverJsonRequest(l,haxeserver_repro_Extractor.get_id(this.extractor),haxeserver_repro_Extractor.get_method(this.extractor),data,next);
								} else {
									var data = JSON.parse(line1);
									this.serverRequest(l,haxeserver_repro_Extractor.get_id(this.extractor),haxeserver_repro_Extractor.get_method(this.extractor),false,data,next);
								}
							} else {
								this.getLine();
								next();
							}
							break;
						case "serverRequestCancelled":
							this.getLine();
							next();
							break;
						case "serverRequestQueued":
							next();
							break;
						case "serverResponse":
							this.getLine();
							next();
							break;
						case "shell":
							var cmd = this.getLine();
							this.println("" + l + ": shell cmd `" + cmd + "`");
							haxeserver_repro_Utils_shellCommand(cmd,next);
							break;
						case "start":
							var tmp;
							if(this.userConfig != null) {
								var _g3 = this;
								var l1 = l;
								var id = 0;
								var method = "initialize";
								var params = this.userConfig;
								var cb = next;
								tmp = function() {
									_g3.serverJsonRequest(l1,id,method,params,cb);
								};
							} else {
								tmp = next;
							}
							this.start(tmp);
							break;
						case "stepByStep":
							this.stepping = haxeserver_repro_Extractor.get_id(this.extractor) == null || haxeserver_repro_Extractor.get_id(this.extractor) == 1;
							next();
							break;
						case "userConfig":
							this.userConfig = this.getData();
							next();
							break;
						default:
							this.println("" + l + ": Unhandled entry: " + _g2);
							this.exit(1);
						}
					}
				} else {
					console.log("src/haxeserver/repro/ReplayRecording.hx:548:","" + l + ": Unexpected line:\n" + line);
				}
			} else if(_g1 == 35) {
				next();
				return;
			} else if(this.extractor.match(line)) {
				var _g1 = haxeserver_repro_Extractor.get_entry(this.extractor);
				if(haxeserver_repro_Extractor.get_kind(this.extractor) == "#") {
					next();
					return;
				} else {
					switch(_g1) {
					case "abort":
						this.aborted = true;
						this.done();
						break;
					case "abortOnFailure":
						this.abortOnFailure = haxeserver_repro_Extractor.get_id(this.extractor) == null || haxeserver_repro_Extractor.get_id(this.extractor) == 1;
						next();
						break;
					case "addGitUntracked":
						this.println("" + l + ": > Add untracked files");
						this.addGitUntracked(next);
						break;
					case "applyGitPatch":
						this.println("" + l + ": > Apply git patch");
						this.applyGitPatch(next);
						break;
					case "applySvnPatch":
						this.println("" + l + ": > Apply svn patch");
						this.applySvnPatch(next);
						break;
					case "assert":
						this.clearAssert();
						var _g2 = haxeserver_repro_Extractor.get_rest(this.extractor);
						var tmp;
						if(_g2 == null) {
							process.stdout.write(Std.string("" + l + ": Invalid assertion \"" + line + "\""));
							process.stdout.write("\n");
							this.exit(1);
							tmp = haxeserver_repro_Assertion.None;
						} else {
							switch(_g2) {
							case "fail":
								tmp = haxeserver_repro_Assertion.ExpectFailure(l);
								break;
							case "false":
								tmp = this.assertionResult(l,this.aborted,haxeserver_repro_Assertion.ExpectUnreachable(l));
								break;
							case "items":
								tmp = haxeserver_repro_Assertion.ExpectItemCount(l,haxeserver_repro_Extractor.get_id(this.extractor));
								break;
							case "output":
								tmp = haxeserver_repro_Assertion.ExpectOutput(l,this.getFileContent());
								break;
							case "success":
								tmp = haxeserver_repro_Assertion.ExpectSuccess(l);
								break;
							case "true":
								tmp = this.assertionResult(l,!this.aborted,haxeserver_repro_Assertion.ExpectReached(l));
								break;
							}
						}
						this.currentAssert = tmp;
						next();
						break;
					case "checkoutGitRef":
						this.println("" + l + ": > Checkout git ref");
						this.checkoutGitRef(this.getLine(),next);
						break;
					case "checkoutSvnRevision":
						this.println("" + l + ": > Checkout svn revision");
						this.checkoutSvnRevision(this.getLine(),next);
						break;
					case "compilationError":case "compilationResult":
						this.getFileContent();
						next();
						break;
					case "compile":
						if(!this.get_started()) {
							this.println("" + l + ": replay not started yet. Use \"- start\" before sending requests.");
							this.exit(1);
						}
						if(!this.aborted) {
							var data = JSON.parse(this.getLine());
							this.serverRequest(l,null,haxeserver_repro_Extractor.get_method(this.extractor),true,data,next);
						} else {
							this.getLine();
							next();
						}
						break;
					case "didChangeTextDocument":
						var event = this.getData();
						if(this.protocolVersion < 1.1 || this.noWatchers) {
							var start = new Date().getTime();
							this.println("" + l + ": Apply document change to " + haxeLanguageServer_extensions_DocumentUriExtensions_toFsPath(event.textDocument.uri));
							this.didChangeTextDocument(event,next);
							if(this.logTimes) {
								this.logTime("didChangeTextDocument",new Date().getTime() - start);
							}
						} else {
							this.println("" + l + ": Skipped document change event for " + haxeLanguageServer_extensions_DocumentUriExtensions_toFsPath(event.textDocument.uri));
							next();
						}
						break;
					case "displayArguments":
						this.displayArguments = this.getData();
						next();
						break;
					case "displayResponse":
						this.displayNextResponse = true;
						next();
						break;
					case "displayServer":
						this.displayServer = this.getData();
						next();
						break;
					case "displayTimings":
						this.displayNextTimings = true;
						next();
						break;
					case "echo":
						this.println("" + l + ": " + haxeserver_repro_Extractor.get_method(this.extractor));
						next();
						break;
					case "fileChanged":
						var id1 = haxeserver_repro_Extractor.get_id(this.extractor);
						var content = js_node_Fs.readFileSync(haxe_io_Path.join([this.path,"files","" + id1 + ".contents"]),{ encoding : "utf8"});
						var path = this.maybeConvertPath(this.getData());
						sys_FileSystem.createDirectory(haxe_io_Path.directory(path));
						js_node_Fs.writeFileSync(path,content);
						next();
						break;
					case "fileCreated":
						var id1 = haxeserver_repro_Extractor.get_id(this.extractor);
						var content = id1 == 0 ? "" : js_node_Fs.readFileSync(haxe_io_Path.join([this.path,"files","" + id1 + ".contents"]),{ encoding : "utf8"});
						var path = this.maybeConvertPath(this.getData());
						sys_FileSystem.createDirectory(haxe_io_Path.directory(path));
						js_node_Fs.writeFileSync(path,content);
						next();
						break;
					case "fileDeleted":
						js_node_Fs.unlinkSync(this.maybeConvertPath(this.getData()));
						next();
						break;
					case "haxe":
						this.getLine();
						next();
						break;
					case "mute":
						this.muted = haxeserver_repro_Extractor.get_id(this.extractor) == null || haxeserver_repro_Extractor.get_id(this.extractor) == 1;
						next();
						break;
					case "pause":
						this.pause(next);
						break;
					case "root":
						this.root = haxe_io_Path.normalize(haxeserver_repro_Extractor.get_method(this.extractor));
						next();
						break;
					case "serverError":
						this.getFileContent();
						next();
						break;
					case "serverLog":
						this.getFileContent();
						next();
						break;
					case "serverRecordingConfig":
						this.config = this.getData();
						if(this.config.version != null) {
							this.protocolVersion = this.config.version;
						}
						next();
						break;
					case "serverRequest":
						if(!this.get_started()) {
							this.println("" + l + ": replay not started yet. Use \"- start\" before sending requests.");
							this.exit(1);
						}
						if(!this.aborted) {
							var line1 = this.getLine();
							var _g2 = HxOverrides.cca(line1,0);
							if(_g2 == null) {
								var data = JSON.parse(line1);
								this.serverRequest(l,haxeserver_repro_Extractor.get_id(this.extractor),haxeserver_repro_Extractor.get_method(this.extractor),false,data,next);
							} else if(_g2 == 123) {
								var data = JSON.parse(line1);
								this.serverJsonRequest(l,haxeserver_repro_Extractor.get_id(this.extractor),haxeserver_repro_Extractor.get_method(this.extractor),data,next);
							} else {
								var data = JSON.parse(line1);
								this.serverRequest(l,haxeserver_repro_Extractor.get_id(this.extractor),haxeserver_repro_Extractor.get_method(this.extractor),false,data,next);
							}
						} else {
							this.getLine();
							next();
						}
						break;
					case "serverRequestCancelled":
						this.getLine();
						next();
						break;
					case "serverRequestQueued":
						next();
						break;
					case "serverResponse":
						this.getLine();
						next();
						break;
					case "shell":
						var cmd = this.getLine();
						this.println("" + l + ": shell cmd `" + cmd + "`");
						haxeserver_repro_Utils_shellCommand(cmd,next);
						break;
					case "start":
						var tmp;
						if(this.userConfig != null) {
							var _g2 = this;
							var l2 = l;
							var id1 = 0;
							var method1 = "initialize";
							var params1 = this.userConfig;
							var cb1 = next;
							tmp = function() {
								_g2.serverJsonRequest(l2,id1,method1,params1,cb1);
							};
						} else {
							tmp = next;
						}
						this.start(tmp);
						break;
					case "stepByStep":
						this.stepping = haxeserver_repro_Extractor.get_id(this.extractor) == null || haxeserver_repro_Extractor.get_id(this.extractor) == 1;
						next();
						break;
					case "userConfig":
						this.userConfig = this.getData();
						next();
						break;
					default:
						this.println("" + l + ": Unhandled entry: " + _g1);
						this.exit(1);
					}
				}
			} else {
				console.log("src/haxeserver/repro/ReplayRecording.hx:548:","" + l + ": Unexpected line:\n" + line);
			}
		} catch( _g1 ) {
			var _g4 = haxe_Exception.caught(_g1);
			console.error(_g4);
			this.exit(1);
		}
	}
	,clearAssert: function() {
		this.currentAssert = this.currentAssert._hx_index == 0 ? haxeserver_repro_Assertion.None : this.assertionResult(null,false);
	}
	,assertionResult: function(l,result,assert) {
		if(assert == null) {
			assert = this.currentAssert;
		}
		var this1 = this.assertions;
		var key;
		switch(assert._hx_index) {
		case 0:
			throw haxe_Exception.thrown("Invalid assertion result");
		case 1:
			key = assert.line;
			break;
		case 2:
			key = assert.line;
			break;
		case 3:
			key = assert.line;
			break;
		case 4:
			key = assert.line;
			break;
		case 5:
			key = assert.line;
			break;
		case 6:
			key = assert.line;
			break;
		}
		this1.h[key] = { assert : assert, lineApplied : l, success : result};
		this.currentAssert = haxeserver_repro_Assertion.None;
		return this.currentAssert;
	}
	,cleanup: function() {
		if(this.file != null) {
			this.file.close();
		}
		this.file = null;
		var _g = this.vcsStatus;
		switch(_g._hx_index) {
		case 0:
			this.resetGit(_g.ref);
			break;
		case 1:
			this.resetSvn(_g.rev);
			break;
		case 2:
			break;
		}
		if(this.server != null) {
			this.server.kill();
		}
	}
	,exit: function(code) {
		if(code == null) {
			code = 1;
		}
		this.cleanup();
		process.exit(code);
	}
	,println: function(s,ignoreSilent) {
		if(ignoreSilent == null) {
			ignoreSilent = false;
		}
		if(!this.aborted && !this.muted && (ignoreSilent || !this.silent)) {
			process.stdout.write(Std.string(s));
			process.stdout.write("\n");
		}
	}
	,onServerMessage: function(msg) {
		process.stdout.write("\x1B[2m");
		process.stdout.write(Std.string(msg));
		process.stdout.write("\x1B[0m");
		process.stdout.write("\n");
	}
	,displayTimingsTable: function(heading,times) {
		if(0 >= Object.keys(times.h).length) {
			return;
		}
		var buf_b = "";
		buf_b = "\n";
		var cols = [heading,"Count","Total (s)","Average (ms)","Max (ms)"];
		var result = new Array(cols.length);
		var _g = 0;
		var _g1 = cols.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = cols[i].length;
		}
		var times_h = Object.create(null);
		var h = times.h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g_value = h[key];
			if(key.length > result[0]) {
				result[0] = key.length;
			}
			var countStr = _g_value.count == null ? "null" : "" + _g_value.count;
			if(countStr.length > result[1]) {
				result[1] = countStr.length;
			}
			var totalStr = Std.string(Math.round(_g_value.total) / 1000);
			if(totalStr.length > result[2]) {
				result[2] = totalStr.length;
			}
			times_h[key] = { count : countStr, total : totalStr, avg : Std.string(Math.round(_g_value.total / _g_value.count)), max : _g_value.max};
		}
		var len = 0;
		var _g_current = 0;
		while(_g_current < cols.length) {
			var _g_value = cols[_g_current];
			var _g_key = _g_current++;
			len += result[_g_key] + 2;
			buf_b += _g_value == null ? "null" : "" + _g_value;
			if(_g_key < result.length) {
				var _g = 0;
				var _g1 = result[_g_key] - _g_value.length + 2;
				while(_g < _g1) {
					++_g;
					buf_b += " ";
				}
			}
		}
		buf_b += "\n";
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			++_g;
			buf_b += "-";
		}
		buf_b += "\n";
		var _g_keys = Object.keys(times_h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g_value = times_h[key];
			buf_b += key == null ? "null" : "" + key;
			var _g = 0;
			var _g1 = result[0] - key.length + 2;
			while(_g < _g1) {
				++_g;
				buf_b += " ";
			}
			buf_b += Std.string(_g_value.count);
			var _g2 = 0;
			var _g3 = result[1] - _g_value.count.length + 2;
			while(_g2 < _g3) {
				++_g2;
				buf_b += " ";
			}
			buf_b += Std.string(_g_value.total);
			var _g4 = 0;
			var _g5 = result[2] - _g_value.total.length + 2;
			while(_g4 < _g5) {
				++_g4;
				buf_b += " ";
			}
			buf_b += Std.string(_g_value.avg);
			var _g6 = 0;
			var _g7 = result[3] - _g_value.avg.length + 2;
			while(_g6 < _g7) {
				++_g6;
				buf_b += " ";
			}
			buf_b += Std.string(_g_value.max);
			buf_b += "\n";
		}
		process.stdout.write(Std.string(buf_b));
		process.stdout.write("\n");
	}
	,getLine: function(skipEmpty,skipComments) {
		if(skipComments == null) {
			skipComments = true;
		}
		if(skipEmpty == null) {
			skipEmpty = true;
		}
		this.lineNumber++;
		try {
			var ret = this.file.readLine();
			if(skipEmpty && ret == "") {
				return this.getLine(true,skipComments);
			}
			if(skipComments && HxOverrides.cca(ret,0) == 35) {
				return this.getLine(skipEmpty,true);
			}
			return ret;
		} catch( _g ) {
			return "";
		}
	}
	,getFileContent: function() {
		var next = this.getLine(false,false);
		if(next == "<<EOF") {
			var ret_b = "";
			while(true) {
				var line = this.getLine(false,false);
				if(line == "EOF") {
					break;
				}
				ret_b += line == null ? "null" : "" + line;
				ret_b += "\n";
			}
			return ret_b;
		}
		return next;
	}
	,getData: function() {
		return JSON.parse(this.getLine());
	}
	,git: function() {
		var $l=arguments.length;
		var args = new Array($l>0?$l-0:0);
		for(var $i=0;$i<$l;++$i){args[$i-0]=arguments[$i];}
		var proc = js_node_ChildProcess.spawnSync("git",args.slice());
		if(proc.status > 0) {
			throw haxe_Exception.thrown(StringTools.trim(proc.stderr.toString()));
		}
		return StringTools.trim(proc.stdout.toString());
	}
	,checkoutGitRef: function(ref,next) {
		var gitRef = this.git("rev-parse","--abbrev-ref","HEAD");
		if(gitRef == "HEAD") {
			gitRef = this.git("rev-parse","--short","HEAD");
		}
		this.vcsStatus = haxeserver_repro_VcsStatus.GitReference(gitRef);
		if(StringTools.trim(this.git("status","--porcelain")) != "") {
			this.createdStash = true;
			this.git("stash","save","--include-untracked","Stash before replay");
		}
		this.git("checkout",ref);
		next();
	}
	,applyGitPatch: function(next) {
		this.git("apply","--allow-empty","--whitespace=fix",haxe_io_Path.join([this.path,"status.patch"]));
		next();
	}
	,addGitUntracked: function(next) {
		var untracked = haxe_io_Path.join([this.path,"untracked"]);
		var copyUntracked = null;
		copyUntracked = function(root) {
			var _g = 0;
			var _g1 = js_node_Fs.readdirSync(haxe_io_Path.join([untracked,root]));
			while(_g < _g1.length) {
				var entry = _g1[_g];
				++_g;
				var entryPath = haxe_io_Path.join([untracked,root,entry]);
				if(sys_FileSystem.isDirectory(entryPath)) {
					copyUntracked(haxe_io_Path.join([root,entry]));
				} else {
					var target = haxe_io_Path.join([root,entry]);
					var targetDir = haxe_io_Path.directory(target);
					if(targetDir != "" && !sys_FileSystem.exists(targetDir)) {
						sys_FileSystem.createDirectory(targetDir);
					}
					js_node_Fs.writeFileSync(target,js_node_Fs.readFileSync(entryPath,{ encoding : "utf8"}));
				}
			}
		};
		copyUntracked(".");
		next();
	}
	,resetGit: function(ref) {
		this.git("clean","-f","-d");
		this.git("reset","--hard");
		this.git("checkout",ref);
		if(this.createdStash) {
			this.git("stash","pop");
		}
	}
	,svn: function() {
		var $l=arguments.length;
		var args = new Array($l>0?$l-0:0);
		for(var $i=0;$i<$l;++$i){args[$i-0]=arguments[$i];}
		var args1 = args.slice();
		var proc = js_node_ChildProcess.spawnSync("svn",args1,StringTools.startsWith(args1[0],"x-") ? { env : { SVN_EXPERIMENTAL_COMMANDS : "shelf3"}} : { });
		if(proc.status > 0) {
			throw haxe_Exception.thrown(StringTools.trim(proc.stderr.toString()));
		}
		return StringTools.trim(proc.stdout.toString());
	}
	,checkoutSvnRevision: function(revision,next) {
		this.vcsStatus = haxeserver_repro_VcsStatus.SvnRevision(this.svn("info","--show-item","revision"));
		if(this.svn("status") != "") {
			this.createdStash = true;
			this.svn("x-shelve","Stash before replay");
		}
		this.svn("update","-r",revision);
		next();
	}
	,applySvnPatch: function(next) {
		this.svn("patch","--strip=0",haxe_io_Path.join([this.path,"status.patch"]));
		next();
	}
	,resetSvn: function(revision) {
		this.svn("revert","-R",".");
		this.svn("cleanup","--remove-unversioned");
		this.svn("update","-r",revision);
		if(this.createdStash) {
			this.svn("x-unshelve","--drop","Stash before replay");
		}
	}
	,maybeConvertPath: function(a) {
		var isCwd = StringTools.startsWith(a,"--cwd ");
		if(isCwd) {
			a = HxOverrides.substr(a,"--cwd ".length,null);
		}
		var relative = haxeserver_repro_Utils_makeRelative(a,this.root);
		if(relative != null) {
			if(isCwd) {
				return "--cwd " + relative;
			} else {
				return relative;
			}
		}
		try {
			var data = JSON.parse(a);
			var relative = haxeserver_repro_Utils_makeRelative(data.params.file,this.root);
			if(relative != null) {
				data.params.file = relative;
				return JSON.stringify(data);
			}
		} catch( _g ) {
		}
		return a;
	}
	,serverJsonRequest: function(l,id,method,params,cb) {
		this.serverRequest(l,id,method,false,this.displayArguments.concat(["--display",JSON.stringify({ method : method, id : id, params : params})]),$bind(this,this.next));
	}
	,serverRequest: function(l,id,request,isCompilation,params,cb) {
		var _gthis = this;
		var next = function() {
			_gthis.clearAssert();
			if(_gthis.stepping) {
				_gthis.pause(cb);
			} else {
				cb();
			}
		};
		if(isCompilation) {
			this.println("" + l + ": > Compilation \"" + request + "\"",this.displayNextResponse);
		} else {
			this.println("" + l + ": > Server request" + (id == null ? "" : " #" + id) + " \"" + request + "\"",this.displayNextResponse);
		}
		var f = $bind(this,this.maybeConvertPath);
		var result = new Array(params.length);
		var _g = 0;
		var _g1 = params.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = f(params[i]);
		}
		var start = new Date().getTime();
		this.client.rawRequest(this.displayNextTimings ? ["-D display-details","--times","-D macro-times"].concat(result) : ["-D","display-details"].concat(result),null,this.onServerResponse(isCompilation ? "compilation" : request,l,start,next),function(err) {
			throw haxe_Exception.thrown(err);
		});
	}
	,onServerResponse: function(request,l,start,next) {
		var _gthis = this;
		return function(res) {
			if(_gthis.logTimes) {
				_gthis.logTime(request,new Date().getTime() - start);
			}
			var hasError = res.hasError;
			var out = res.stderr.toString();
			var _g = _gthis.currentAssert;
			if(_g._hx_index == 6) {
				var _g1 = _g.output;
				hasError = out != _g1;
				if(hasError) {
					var a = new diff_FileData(haxe_io_Bytes.ofString(_g1),"expected",new Date());
					var b = new diff_FileData(haxe_io_Bytes.ofString(out),"actual",new Date());
					var ctx = new diff_Context(a,b,10);
					var diff = diff_Printer.printUnidiff(ctx,diff_Analyze.diff2Files(ctx));
					diff = diff.split("\n").slice(3).join("\n");
					_gthis.println(diff,true);
				}
				_gthis.assertionResult(l,!hasError);
			}
			if(request == "compilation") {
				if(hasError) {
					_gthis.println("" + l + ": => Compilation error:\n" + StringTools.trim(out),true);
				} else if(_gthis.displayNextResponse) {
					_gthis.println(StringTools.trim(out),true);
				}
			} else {
				var _g = _gthis.extractResult(out);
				switch(_g._hx_index) {
				case 0:
					var _g1 = _g.json;
					if(_g1.result != null && _g1.result.timers != null) {
						if(_gthis.displayNextTimings) {
							var buf = new StringBuf();
							buf.b += "\x1B[2m";
							haxeserver_repro_Utils_printTimers(buf,_g1.result.timers);
							buf.b += "\x1B[0m";
							_gthis.println(buf.b);
						}
						var parent;
						if(Object.prototype.hasOwnProperty.call(_gthis.timers.h,request)) {
							parent = _gthis.timers.h[request];
						} else {
							var arr = [];
							_gthis.timers.h[request] = arr;
							parent = arr;
						}
						parent.push({ line : l, timer : _g1.result.timers});
					}
					switch(request) {
					case "display/completion":
						var res1 = _g1.result;
						var nbItems;
						try {
							nbItems = res1.result.items.length;
						} catch( _g2 ) {
							nbItems = 0;
						}
						if(_gthis.displayNextResponse) {
							_gthis.println("" + l + " => Completion request returned " + nbItems + " items",true);
							if(hasError || res1 == null) {
								_gthis.println(StringTools.trim(out),true);
							}
						}
						var _g2 = _gthis.currentAssert;
						if(_g2._hx_index == 5) {
							var _g3 = _g2.count;
							if(_g3 == null) {
								hasError = nbItems == 0;
								_gthis.assertionResult(l,!hasError);
							} else {
								hasError = _g3 != nbItems;
								_gthis.assertionResult(l,!hasError);
							}
						} else {
							hasError = false;
						}
						if(hasError) {
							_gthis.println("" + l + ": => Completion request failed",true);
						}
						break;
					case "server/contexts":
						if(_gthis.displayNextResponse) {
							var contexts = _g1.result.result;
							var _g2 = 0;
							while(_g2 < contexts.length) {
								var c = contexts[_g2];
								++_g2;
								_gthis.println("  " + c.index + " " + c.desc + " (" + c.platform + ", " + c.defines.length + " defines)",true);
								_gthis.println("    signature: " + c.signature,true);
							}
						} else {
							if(hasError || _gthis.displayNextResponse) {
								_gthis.println("" + l + ": => Server response: " + (hasError ? "(has error)" : ""),true);
							}
							if(_gthis.displayNextResponse) {
								_gthis.println(Std.string(_g1),true);
								_gthis.println(StringTools.trim(out),true);
							}
						}
						break;
					default:
						if(hasError || _gthis.displayNextResponse) {
							_gthis.println("" + l + ": => Server response: " + (hasError ? "(has error)" : ""),true);
						}
						if(_gthis.displayNextResponse) {
							_gthis.println(Std.string(_g1),true);
							_gthis.println(StringTools.trim(out),true);
						}
					}
					break;
				case 1:
					if(hasError || _gthis.displayNextResponse) {
						_gthis.println("" + l + ": => Server response: " + (res.hasError ? "(has error)" : ""),true);
					}
					if(_gthis.displayNextResponse) {
						_gthis.println(_g.out,true);
					}
					break;
				case 2:
					if(request == "display/completion") {
						hasError = true;
					}
					if(hasError || _gthis.displayNextResponse) {
						_gthis.println("" + l + ": => Empty server response",true);
					}
					break;
				}
			}
			switch(_gthis.currentAssert._hx_index) {
			case 3:
				_gthis.assertionResult(l,hasError);
				break;
			case 4:
				_gthis.assertionResult(l,!hasError);
				break;
			default:
			}
			if(_gthis.displayNextResponse) {
				var tmp = res.stdout;
				var serverOut = tmp != null ? tmp.toString() : null;
				if(serverOut != "") {
					_gthis.onServerMessage(StringTools.trim(serverOut));
				}
			}
			if(_gthis.displayNextResponse) {
				_gthis.displayNextResponse = false;
			}
			if(_gthis.displayNextTimings) {
				_gthis.displayNextTimings = false;
			}
			if(hasError && _gthis.abortOnFailure) {
				_gthis.println("Failure detected, aborting rest of script.",true);
				_gthis.aborted = true;
				_gthis.exit(1);
			}
			next();
		};
	}
	,extractResult: function(out) {
		var lines = out.split("\n");
		var last = lines.length > 1 ? lines.pop() : "";
		if(lines.length == 1) {
			if(last == null) {
				var out1 = lines.join("\n") + (last == "" ? "" : "\n" + last);
				if(out1 == "") {
					return haxeserver_repro_ResponseKind.Empty;
				} else {
					return haxeserver_repro_ResponseKind.Raw(out1);
				}
			} else if(last == "") {
				var json;
				try {
					json = JSON.parse(lines[0]);
				} catch( _g ) {
					json = null;
				}
				if(json == null) {
					return haxeserver_repro_ResponseKind.Raw(out);
				}
				return haxeserver_repro_ResponseKind.JsonResult(json);
			} else {
				var out = lines.join("\n") + (last == "" ? "" : "\n" + last);
				if(out == "") {
					return haxeserver_repro_ResponseKind.Empty;
				} else {
					return haxeserver_repro_ResponseKind.Raw(out);
				}
			}
		} else {
			var out = lines.join("\n") + (last == "" ? "" : "\n" + last);
			if(out == "") {
				return haxeserver_repro_ResponseKind.Empty;
			} else {
				return haxeserver_repro_ResponseKind.Raw(out);
			}
		}
	}
	,logTime: function(k,t) {
		var old = this.times.h[k];
		if(old == null) {
			this.times.h[k] = { count : 1, total : t, max : t};
		} else {
			this.times.h[k] = { count : old.count + 1, total : old.total + t, max : Math.max(t,old.max)};
		}
	}
	,didChangeTextDocument: function(event,next) {
		var path = this.maybeConvertPath(haxeLanguageServer_extensions_DocumentUriExtensions_toFsPath(event.textDocument.uri));
		var content = js_node_Fs.readFileSync(path,{ encoding : "utf8"});
		var doc = new haxeLanguageServer_documents_HxTextDocument(event.textDocument.uri,"",0,content);
		doc.update(event.contentChanges,event.textDocument.version);
		js_node_Fs.writeFileSync(path,doc.content);
		next();
	}
};
var haxeserver_repro_Assertion = $hxEnums["haxeserver.repro.Assertion"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"haxeserver.repro.Assertion",toString:$estr}
	,ExpectReached: ($_=function(line) { return {_hx_index:1,line:line,__enum__:"haxeserver.repro.Assertion",toString:$estr}; },$_._hx_name="ExpectReached",$_.__params__ = ["line"],$_)
	,ExpectUnreachable: ($_=function(line) { return {_hx_index:2,line:line,__enum__:"haxeserver.repro.Assertion",toString:$estr}; },$_._hx_name="ExpectUnreachable",$_.__params__ = ["line"],$_)
	,ExpectFailure: ($_=function(line) { return {_hx_index:3,line:line,__enum__:"haxeserver.repro.Assertion",toString:$estr}; },$_._hx_name="ExpectFailure",$_.__params__ = ["line"],$_)
	,ExpectSuccess: ($_=function(line) { return {_hx_index:4,line:line,__enum__:"haxeserver.repro.Assertion",toString:$estr}; },$_._hx_name="ExpectSuccess",$_.__params__ = ["line"],$_)
	,ExpectItemCount: ($_=function(line,count) { return {_hx_index:5,line:line,count:count,__enum__:"haxeserver.repro.Assertion",toString:$estr}; },$_._hx_name="ExpectItemCount",$_.__params__ = ["line","count"],$_)
	,ExpectOutput: ($_=function(line,output) { return {_hx_index:6,line:line,output:output,__enum__:"haxeserver.repro.Assertion",toString:$estr}; },$_._hx_name="ExpectOutput",$_.__params__ = ["line","output"],$_)
};
haxeserver_repro_Assertion.__constructs__ = [haxeserver_repro_Assertion.None,haxeserver_repro_Assertion.ExpectReached,haxeserver_repro_Assertion.ExpectUnreachable,haxeserver_repro_Assertion.ExpectFailure,haxeserver_repro_Assertion.ExpectSuccess,haxeserver_repro_Assertion.ExpectItemCount,haxeserver_repro_Assertion.ExpectOutput];
var haxeserver_repro_ResponseKind = $hxEnums["haxeserver.repro.ResponseKind"] = { __ename__:true,__constructs__:null
	,JsonResult: ($_=function(json) { return {_hx_index:0,json:json,__enum__:"haxeserver.repro.ResponseKind",toString:$estr}; },$_._hx_name="JsonResult",$_.__params__ = ["json"],$_)
	,Raw: ($_=function(out) { return {_hx_index:1,out:out,__enum__:"haxeserver.repro.ResponseKind",toString:$estr}; },$_._hx_name="Raw",$_.__params__ = ["out"],$_)
	,Empty: {_hx_name:"Empty",_hx_index:2,__enum__:"haxeserver.repro.ResponseKind",toString:$estr}
};
haxeserver_repro_ResponseKind.__constructs__ = [haxeserver_repro_ResponseKind.JsonResult,haxeserver_repro_ResponseKind.Raw,haxeserver_repro_ResponseKind.Empty];
var haxeserver_repro_VcsStatus = $hxEnums["haxeserver.repro.VcsStatus"] = { __ename__:true,__constructs__:null
	,GitReference: ($_=function(ref) { return {_hx_index:0,ref:ref,__enum__:"haxeserver.repro.VcsStatus",toString:$estr}; },$_._hx_name="GitReference",$_.__params__ = ["ref"],$_)
	,SvnRevision: ($_=function(rev) { return {_hx_index:1,rev:rev,__enum__:"haxeserver.repro.VcsStatus",toString:$estr}; },$_._hx_name="SvnRevision",$_.__params__ = ["rev"],$_)
	,None: {_hx_name:"None",_hx_index:2,__enum__:"haxeserver.repro.VcsStatus",toString:$estr}
};
haxeserver_repro_VcsStatus.__constructs__ = [haxeserver_repro_VcsStatus.GitReference,haxeserver_repro_VcsStatus.SvnRevision,haxeserver_repro_VcsStatus.None];
var haxeserver_repro_TimersReporting = $hxEnums["haxeserver.repro.TimersReporting"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"haxeserver.repro.TimersReporting",toString:$estr}
	,Aggregate: {_hx_name:"Aggregate",_hx_index:1,__enum__:"haxeserver.repro.TimersReporting",toString:$estr}
	,Details: ($_=function(request) { return {_hx_index:2,request:request,__enum__:"haxeserver.repro.TimersReporting",toString:$estr}; },$_._hx_name="Details",$_.__params__ = ["request"],$_)
};
haxeserver_repro_TimersReporting.__constructs__ = [haxeserver_repro_TimersReporting.None,haxeserver_repro_TimersReporting.Aggregate,haxeserver_repro_TimersReporting.Details];
function haxeserver_repro_Utils_shellCommand(cmd,cb) {
	var proc = js_node_ChildProcess.spawnSync(cmd,{ shell : true});
	if(proc.status > 0) {
		process.stdout.write("\x1B[31m");
		var v = "-> Error code " + proc.status;
		process.stdout.write(Std.string(v));
		process.stdout.write("\x1B[0m");
		process.stdout.write("\n");
		var buf = proc.stderr;
		if(buf != null) {
			var out = StringTools.trim(buf.toString());
			if(out != "") {
				process.stdout.write(Std.string(out));
				process.stdout.write("\n");
			}
		}
	}
	var buf = proc.stdout;
	if(buf != null) {
		if(buf != null) {
			var out = StringTools.trim(buf.toString());
			if(out != "") {
				process.stdout.write(Std.string(out));
				process.stdout.write("\n");
			}
		}
	}
	cb();
}
function haxeserver_repro_Utils_makeRelative(path,root) {
	if(HxOverrides.cca(path,0) == 47) {
		if(StringTools.startsWith(path,root)) {
			path = HxOverrides.substr(path,root.length,null);
			if(HxOverrides.cca(path,0) == 47) {
				path = HxOverrides.substr(path,1,null);
			}
			if(path == "") {
				path = ".";
			}
			return path;
		}
		throw haxe_Exception.thrown("Absolute path outside root not handled yet (" + path + ")");
	}
	if(HxOverrides.cca(path,1) == 58 && HxOverrides.cca(path,2) == 47) {
		var norm = haxe_io_Path.normalize(path);
		var upper = norm.toUpperCase();
		var root1 = haxe_io_Path.normalize(root).toUpperCase();
		if(StringTools.startsWith(upper,root1)) {
			path = HxOverrides.substr(norm,root1.length,null);
			if(HxOverrides.cca(path,0) == 47) {
				path = HxOverrides.substr(path,1,null);
			}
			if(path == "") {
				path = ".";
			}
			return path;
		}
		throw haxe_Exception.thrown("Absolute path outside root not handled yet (" + path + ")");
	}
	return null;
}
function haxeserver_repro_Utils_printCol(buf,colSize,col,content,alignRight) {
	if(!alignRight) {
		buf.b += content == null ? "null" : "" + content;
	}
	var _g = 0;
	var _g1 = colSize[col] - content.length;
	while(_g < _g1) {
		++_g;
		buf.b += " ";
	}
	if(alignRight) {
		buf.b += content == null ? "null" : "" + content;
	}
	buf.b += " | ";
}
function haxeserver_repro_Utils_printTimers(buf,timers) {
	if(timers.time == 0) {
		return;
	}
	var cols = ["name","time(s)","%","p%","#"];
	var result = new Array(cols.length);
	var _g = 0;
	var _g1 = cols.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = cols[i].length;
	}
	var colSize = result;
	var buf1 = buf;
	var colSize1 = colSize;
	var printCol = function(col,content,alignRight) {
		haxeserver_repro_Utils_printCol(buf1,colSize1,col,content,alignRight);
	};
	var growCol = function(col,size) {
		if(size > colSize[col]) {
			colSize[col] = size;
		}
	};
	var loop = null;
	loop = function(t,depth) {
		growCol(0,depth * 2 + t.name.length);
		growCol(1,Std.string(Math.round(t.time * 1000) / 1000).length);
		if(t.percentTotal != null) {
			growCol(2,Std.string(Math.round(t.percentTotal)).length);
		}
		if(t.percentParent != null) {
			growCol(3,Std.string(Math.round(t.percentParent)).length);
		}
		if(t.calls != null) {
			growCol(4,(t.calls == null ? "null" : "" + t.calls).length);
		}
		if(t.children != null) {
			var _g = 0;
			var _g1 = t.children;
			while(_g < _g1.length) loop(_g1[_g++],depth + 1);
		}
	};
	loop(timers,0);
	buf.b += "\n";
	var _g_current = 0;
	while(_g_current < cols.length) {
		var _g_value = cols[_g_current++];
		var _g_key = _g_current - 1;
		printCol(_g_key,_g_value,_g_key > 0);
	}
	buf.b += "info\n";
	haxeserver_repro_Utils_printTimer(buf,colSize,timers,0);
}
function haxeserver_repro_Utils_printTimer(buf,colSize,t,depth) {
	var buf1 = buf;
	var colSize1 = colSize;
	var printCol = function(col,content,alignRight) {
		haxeserver_repro_Utils_printCol(buf1,colSize1,col,content,alignRight);
	};
	var print = function(name) {
		var _g = 0;
		var _g1 = depth - 1;
		while(_g < _g1) {
			++_g;
			name = "  " + name;
		}
		printCol(0,name,false);
		printCol(1,Std.string(Math.round(t.time * 1000) / 1000),true);
		printCol(2,t.percentTotal == null ? "" : Std.string(Math.round(t.percentTotal)),true);
		printCol(3,t.percentParent == null ? "" : Std.string(Math.round(t.percentParent)),true);
		printCol(4,t.calls == null ? "" : t.calls == null ? "null" : "" + t.calls,true);
		if(t.info != null) {
			buf.b += Std.string(t.info);
		}
		buf.b += "\n";
	};
	var w = 0;
	var isRoot = t.name == "";
	if(isRoot) {
		w = Lambda.fold(colSize,function(c,acc) {
			return acc + c + 3;
		},-1);
		var _g = 0;
		var _g1 = w;
		while(_g < _g1) {
			++_g;
			buf.b += "-";
		}
		buf.b += "\n";
	} else {
		print(t.name);
	}
	if(t.children != null) {
		var _g = 0;
		var _g1 = t.children;
		while(_g < _g1.length) haxeserver_repro_Utils_printTimer(buf,colSize,_g1[_g++],depth + 1);
	}
	if(isRoot) {
		var _g = 0;
		var _g1 = w;
		while(_g < _g1) {
			++_g;
			buf.b += "-";
		}
		buf.b += "\n";
		print("total");
	}
}
function haxeserver_repro_Utils_secondsToMs(seconds) {
	return Math.round(seconds * 10000) / 10 + "ms";
}
var hxargs_Args = function() { };
hxargs_Args.__name__ = true;
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = true;
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var js_node_ChildProcess = require("child_process");
var js_node_Fs = require("fs");
var js_node_KeyValue = {};
js_node_KeyValue.get_key = function(this1) {
	return this1[0];
};
js_node_KeyValue.get_value = function(this1) {
	return this1[1];
};
var js_node_Net = require("net");
var js_node_Path = require("path");
var js_node_buffer__$Buffer_Helper = function() { };
js_node_buffer__$Buffer_Helper.__name__ = true;
js_node_buffer__$Buffer_Helper.bytesOfBuffer = function(b) {
	var o = Object.create(haxe_io_Bytes.prototype);
	o.length = b.byteLength;
	o.b = b;
	b.bufferValue = b;
	b.hxBytes = o;
	b.bytes = b;
	return o;
};
var js_node_stream_WritableNewOptionsAdapter = {};
js_node_stream_WritableNewOptionsAdapter.from = function(options) {
	if(!Object.prototype.hasOwnProperty.call(options,"final")) {
		Object.defineProperty(options,"final",{ get : function() {
			return options.final_;
		}});
	}
	return options;
};
var js_node_url_URLSearchParamsEntry = {};
js_node_url_URLSearchParamsEntry._new = function(name,value) {
	return [name,value];
};
js_node_url_URLSearchParamsEntry.get_name = function(this1) {
	return this1[0];
};
js_node_url_URLSearchParamsEntry.get_value = function(this1) {
	return this1[1];
};
var jsonrpc_CancellationToken = {};
jsonrpc_CancellationToken.get_canceled = function(this1) {
	return this1.canceled;
};
jsonrpc_CancellationToken.setCallback = function(this1,cb) {
	this1.callback = cb;
};
var jsonrpc_CancellationTokenSource = {};
jsonrpc_CancellationTokenSource.get_token = function(this1) {
	return this1;
};
jsonrpc_CancellationTokenSource._new = function() {
	return new jsonrpc__$CancellationToken_CancellationTokenImpl();
};
jsonrpc_CancellationTokenSource.cancel = function(this1) {
	if(!this1.canceled) {
		this1.canceled = true;
		if(this1.callback != null) {
			this1.callback();
		}
	}
};
var jsonrpc__$CancellationToken_CancellationTokenImpl = function() {
	this.canceled = false;
};
jsonrpc__$CancellationToken_CancellationTokenImpl.__name__ = true;
jsonrpc__$CancellationToken_CancellationTokenImpl.prototype = {
	cancel: function() {
		if(this.canceled) {
			return;
		}
		this.canceled = true;
		if(this.callback != null) {
			this.callback();
		}
	}
};
var jsonrpc_ErrorUtils = function() { };
jsonrpc_ErrorUtils.__name__ = true;
jsonrpc_ErrorUtils.errorToString = function(error,intro) {
	var result = intro + Std.string(error);
	var stack = haxe_CallStack.exceptionStack();
	if(stack != null && stack.length > 0) {
		result += "\n" + haxe_CallStack.toString(stack);
	}
	return result;
};
var jsonrpc_CancelNotification = function() { };
jsonrpc_CancelNotification.__name__ = true;
var jsonrpc_ProgressNotification = function() { };
jsonrpc_ProgressNotification.__name__ = true;
var jsonrpc_ProgressType = function() {
};
jsonrpc_ProgressType.__name__ = true;
var jsonrpc_Protocol = function(writeMessage) {
	var _gthis = this;
	this.writeMessage = writeMessage;
	this.requestTokens = new haxe_ds_StringMap();
	this.nextRequestId = 0;
	this.requestHandlers = new haxe_ds_StringMap();
	this.notificationHandlers = new haxe_ds_StringMap();
	this.progressHandlers = new haxe_ds_ObjectMap();
	this.responseCallbacks = new haxe_ds_IntMap();
	var handler = function(params) {
		var handler = _gthis.progressHandlers.h[params.token.__id__];
		if(handler != null) {
			handler(params.value);
		}
	};
	this.notificationHandlers.h["$/progress"] = handler;
};
jsonrpc_Protocol.__name__ = true;
jsonrpc_Protocol.prototype = {
	handleMessage: function(message) {
		if((Object.prototype.hasOwnProperty.call(message,"result") || Object.prototype.hasOwnProperty.call(message,"error")) && Object.prototype.hasOwnProperty.call(message,"id")) {
			this.handleResponse(message);
		} else if(Object.prototype.hasOwnProperty.call(message,"method")) {
			if(Object.prototype.hasOwnProperty.call(message,"id")) {
				this.handleRequest(message);
			} else {
				this.handleNotification(message);
			}
		}
	}
	,onRequest: function(method,handler) {
		this.requestHandlers.h[method] = handler;
	}
	,onNotification: function(method,handler) {
		this.notificationHandlers.h[method] = handler;
	}
	,onProgress: function(type,token,handler) {
		var _gthis = this;
		if(this.progressHandlers.h.__keys__[token.__id__] != null) {
			throw haxe_Exception.thrown("Progress handler for token " + token + " already registered");
		}
		this.progressHandlers.set(token,handler);
		return { dispose : function() {
			_gthis.progressHandlers.remove(token);
		}};
	}
	,handleRequest: function(request) {
		var _gthis = this;
		var tokenKey = Std.string(request.id);
		var resolve = function(result) {
			var _this = _gthis.requestTokens;
			if(Object.prototype.hasOwnProperty.call(_this.h,tokenKey)) {
				delete(_this.h[tokenKey]);
			}
			var response = { jsonrpc : "2.0", id : request.id, result : result};
			_gthis.writeMessage(response,null);
			if(_gthis.didRespondToRequest != null) {
				_gthis.didRespondToRequest(request,response);
			}
		};
		var reject = function(error) {
			var _this = _gthis.requestTokens;
			if(Object.prototype.hasOwnProperty.call(_this.h,tokenKey)) {
				delete(_this.h[tokenKey]);
			}
			_gthis.writeMessage({ jsonrpc : "2.0", id : request.id, error : error},null);
		};
		var handler = this.requestHandlers.h[request.method];
		if(handler == null) {
			var reject1 = reject;
			var data = null;
			var this1 = { code : -32601, message : "Unhandled method " + request.method};
			if(data != null) {
				this1.data = data;
			}
			reject1(this1);
			return;
		}
		var tokenSource = new jsonrpc__$CancellationToken_CancellationTokenImpl();
		this.requestTokens.h[tokenKey] = tokenSource;
		try {
			handler(request.params,tokenSource,resolve,reject);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			var _this = this.requestTokens;
			if(Object.prototype.hasOwnProperty.call(_this.h,tokenKey)) {
				delete(_this.h[tokenKey]);
			}
			var message = jsonrpc_ErrorUtils.errorToString(_g1,"Exception while handling request " + request.method + ": ");
			var reject1 = reject;
			var data = null;
			var this1 = { code : -32603, message : message};
			if(data != null) {
				this1.data = data;
			}
			reject1(this1);
			this.logError(message);
		}
	}
	,handleNotification: function(notification) {
		if(notification.method == "$/cancelRequest") {
			var tokenKey = Std.string(notification.params.id);
			var tokenSource = this.requestTokens.h[tokenKey];
			if(tokenSource != null) {
				var _this = this.requestTokens;
				if(Object.prototype.hasOwnProperty.call(_this.h,tokenKey)) {
					delete(_this.h[tokenKey]);
				}
				if(!tokenSource.canceled) {
					tokenSource.canceled = true;
					if(tokenSource.callback != null) {
						tokenSource.callback();
					}
				}
			}
		} else {
			var handler = this.notificationHandlers.h[notification.method];
			if(handler == null) {
				return;
			}
			try {
				handler(notification.params);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g).unwrap();
				this.logError(jsonrpc_ErrorUtils.errorToString(_g1,"Exception while processing notification " + notification.method + ": "));
			}
		}
	}
	,handleResponse: function(response) {
		var v = response.id;
		if(!(typeof(v) == "number" && ((v | 0) === v))) {
			this.logError("Got response with non-integer id:\n" + JSON.stringify(response,null,"    "));
			return;
		}
		var handler = this.responseCallbacks.h[response.id];
		if(handler != null) {
			this.responseCallbacks.remove(response.id);
			try {
				if(Object.prototype.hasOwnProperty.call(response,"error")) {
					if(handler.reject != null) {
						handler.reject(response.error);
					}
				} else if(handler.resolve != null) {
					handler.resolve(response.result);
				}
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g).unwrap();
				this.logError(jsonrpc_ErrorUtils.errorToString(_g1,"Exception while handing response " + handler.method + ": "));
			}
		}
	}
	,sendNotification: function(name,params) {
		var message = { jsonrpc : "2.0", method : name};
		if(params != null) {
			message.params = params;
		}
		this.writeMessage(message,null);
		if(this.didSendNotification != null) {
			this.didSendNotification(message);
		}
	}
	,sendProgress: function(type,token,value) {
		var params = { token : token, value : value};
		var message = { jsonrpc : "2.0", method : "$/progress"};
		if(params != null) {
			message.params = params;
		}
		this.writeMessage(message,null);
		if(this.didSendNotification != null) {
			this.didSendNotification(message);
		}
	}
	,sendRequest: function(method,params,token,resolve,reject) {
		var _gthis = this;
		var id = this.nextRequestId++;
		var request = { jsonrpc : "2.0", id : id, method : method};
		if(params != null) {
			request.params = params;
		}
		this.responseCallbacks.h[id] = new jsonrpc__$Protocol_ResponseCallbackEntry(method,resolve,reject);
		if(token != null) {
			token.callback = function() {
				var params = { id : id};
				var message = { jsonrpc : "2.0", method : "$/cancelRequest"};
				if(params != null) {
					message.params = params;
				}
				_gthis.writeMessage(message,null);
				if(_gthis.didSendNotification != null) {
					_gthis.didSendNotification(message);
				}
			};
		}
		this.writeMessage(request,token);
	}
	,logError: function(message) {
	}
};
var jsonrpc__$Protocol_ResponseCallbackEntry = function(method,resolve,reject) {
	this.method = method;
	this.resolve = resolve;
	this.reject = reject;
};
jsonrpc__$Protocol_ResponseCallbackEntry.__name__ = true;
var jsonrpc_ResponseError = {};
jsonrpc_ResponseError._new = function(code,message,data) {
	var this1 = { code : code, message : message};
	if(data != null) {
		this1.data = data;
	}
	return this1;
};
jsonrpc_ResponseError.internalError = function(message) {
	var data = null;
	var this1 = { code : -32603, message : message};
	if(data != null) {
		this1.data = data;
	}
	return this1;
};
var jsonrpc_RequestType = {};
jsonrpc_RequestType._new = function(method) {
	return method;
};
var jsonrpc_NotificationType = {};
jsonrpc_NotificationType._new = function(method) {
	return method;
};
var jsonrpc_NoData = $hxEnums["jsonrpc.NoData"] = { __ename__:true,__constructs__:null
};
jsonrpc_NoData.__constructs__ = [];
var languageServerProtocol_URI = {};
languageServerProtocol_URI._new = function(uri) {
	return uri;
};
languageServerProtocol_URI.toString = function(this1) {
	return this1;
};
var languageServerProtocol_protocol_CallHierarchyPrepareRequest = function() { };
languageServerProtocol_protocol_CallHierarchyPrepareRequest.__name__ = true;
var languageServerProtocol_protocol_CallHierarchyIncomingCallsRequest = function() { };
languageServerProtocol_protocol_CallHierarchyIncomingCallsRequest.__name__ = true;
var languageServerProtocol_protocol_CallHierarchyOutgoingCallsRequest = function() { };
languageServerProtocol_protocol_CallHierarchyOutgoingCallsRequest.__name__ = true;
var languageServerProtocol_protocol_DocumentColorRequest = function() { };
languageServerProtocol_protocol_DocumentColorRequest.__name__ = true;
var languageServerProtocol_protocol_ColorPresentationRequest = function() { };
languageServerProtocol_protocol_ColorPresentationRequest.__name__ = true;
var languageServerProtocol_protocol_ConfigurationRequest = function() { };
languageServerProtocol_protocol_ConfigurationRequest.__name__ = true;
var languageServerProtocol_protocol_DeclarationRequest = function() { };
languageServerProtocol_protocol_DeclarationRequest.__name__ = true;
var languageServerProtocol_protocol_DocumentDiagnosticRequest = function() { };
languageServerProtocol_protocol_DocumentDiagnosticRequest.__name__ = true;
var languageServerProtocol_protocol_WorkspaceDiagnosticRequest = function() { };
languageServerProtocol_protocol_WorkspaceDiagnosticRequest.__name__ = true;
var languageServerProtocol_protocol_DiagnosticRefreshRequest = function() { };
languageServerProtocol_protocol_DiagnosticRefreshRequest.__name__ = true;
var languageServerProtocol_protocol_WillCreateFilesRequest = function() { };
languageServerProtocol_protocol_WillCreateFilesRequest.__name__ = true;
var languageServerProtocol_protocol_DidCreateFilesNotification = function() { };
languageServerProtocol_protocol_DidCreateFilesNotification.__name__ = true;
var languageServerProtocol_protocol_WillRenameFilesRequest = function() { };
languageServerProtocol_protocol_WillRenameFilesRequest.__name__ = true;
var languageServerProtocol_protocol_DidRenameFilesNotification = function() { };
languageServerProtocol_protocol_DidRenameFilesNotification.__name__ = true;
var languageServerProtocol_protocol_DidDeleteFilesNotification = function() { };
languageServerProtocol_protocol_DidDeleteFilesNotification.__name__ = true;
var languageServerProtocol_protocol_WillDeleteFilesRequest = function() { };
languageServerProtocol_protocol_WillDeleteFilesRequest.__name__ = true;
var languageServerProtocol_protocol_FoldingRangeRequest = function() { };
languageServerProtocol_protocol_FoldingRangeRequest.__name__ = true;
var languageServerProtocol_protocol_ImplementationRequest = function() { };
languageServerProtocol_protocol_ImplementationRequest.__name__ = true;
var languageServerProtocol_protocol_InlayHintRequest = function() { };
languageServerProtocol_protocol_InlayHintRequest.__name__ = true;
var languageServerProtocol_protocol_HaxeInlayHintRequest = function() { };
languageServerProtocol_protocol_HaxeInlayHintRequest.__name__ = true;
var languageServerProtocol_protocol_InlayHintResolveRequest = function() { };
languageServerProtocol_protocol_InlayHintResolveRequest.__name__ = true;
var languageServerProtocol_protocol_InlayHintRefreshRequest = function() { };
languageServerProtocol_protocol_InlayHintRefreshRequest.__name__ = true;
var languageServerProtocol_protocol_InlineValueRequest = function() { };
languageServerProtocol_protocol_InlineValueRequest.__name__ = true;
var languageServerProtocol_protocol_InlineValueRefreshRequest = function() { };
languageServerProtocol_protocol_InlineValueRefreshRequest.__name__ = true;
var languageServerProtocol_protocol_LinkedEditingRangeRequest = function() { };
languageServerProtocol_protocol_LinkedEditingRangeRequest.__name__ = true;
var languageServerProtocol_protocol_RegistrationType = {};
languageServerProtocol_protocol_RegistrationType._new = function(method) {
	return method;
};
var languageServerProtocol_protocol_ProtocolRequestType = {};
languageServerProtocol_protocol_ProtocolRequestType._new = function(method) {
	return method;
};
languageServerProtocol_protocol_ProtocolRequestType.toRequestType = function(this1) {
	return this1;
};
languageServerProtocol_protocol_ProtocolRequestType.toProgressType = function(this1) {
	return new jsonrpc_ProgressType();
};
var languageServerProtocol_protocol_ProtocolNotificationType = {};
languageServerProtocol_protocol_ProtocolNotificationType._new = function(method) {
	return method;
};
languageServerProtocol_protocol_ProtocolNotificationType.toNotificationType = function(this1) {
	return this1;
};
var languageServerProtocol_protocol_Never = $hxEnums["languageServerProtocol.protocol.Never"] = { __ename__:true,__constructs__:null
};
languageServerProtocol_protocol_Never.__constructs__ = [];
var languageServerProtocol_protocol_MonikerRequest = function() { };
languageServerProtocol_protocol_MonikerRequest.__name__ = true;
var languageServerProtocol_protocol_NotebookDocumentSyncRegistrationType = function() { };
languageServerProtocol_protocol_NotebookDocumentSyncRegistrationType.__name__ = true;
var languageServerProtocol_protocol_DidOpenNotebookDocumentNotification = function() { };
languageServerProtocol_protocol_DidOpenNotebookDocumentNotification.__name__ = true;
var languageServerProtocol_protocol_DidChangeNotebookDocumentNotification = function() { };
languageServerProtocol_protocol_DidChangeNotebookDocumentNotification.__name__ = true;
var languageServerProtocol_protocol_DidSaveNotebookDocumentNotification = function() { };
languageServerProtocol_protocol_DidSaveNotebookDocumentNotification.__name__ = true;
var languageServerProtocol_protocol_DidCloseNotebookDocumentNotification = function() { };
languageServerProtocol_protocol_DidCloseNotebookDocumentNotification.__name__ = true;
var languageServerProtocol_protocol_WorkDoneProgress = function() { };
languageServerProtocol_protocol_WorkDoneProgress.__name__ = true;
var languageServerProtocol_protocol_WorkDoneProgressCreateRequest = function() { };
languageServerProtocol_protocol_WorkDoneProgressCreateRequest.__name__ = true;
var languageServerProtocol_protocol_WorkDoneProgressCancelNotification = function() { };
languageServerProtocol_protocol_WorkDoneProgressCancelNotification.__name__ = true;
var languageServerProtocol_protocol_ResponseError = {};
var languageServerProtocol_protocol_RegistrationRequest = function() { };
languageServerProtocol_protocol_RegistrationRequest.__name__ = true;
var languageServerProtocol_protocol_UnregistrationRequest = function() { };
languageServerProtocol_protocol_UnregistrationRequest.__name__ = true;
var languageServerProtocol_protocol_InitializeRequest = function() { };
languageServerProtocol_protocol_InitializeRequest.__name__ = true;
var languageServerProtocol_protocol_InitializedNotification = function() { };
languageServerProtocol_protocol_InitializedNotification.__name__ = true;
var languageServerProtocol_protocol_ShutdownRequest = function() { };
languageServerProtocol_protocol_ShutdownRequest.__name__ = true;
var languageServerProtocol_protocol_ExitNotification = function() { };
languageServerProtocol_protocol_ExitNotification.__name__ = true;
var languageServerProtocol_protocol_DidChangeConfigurationNotification = function() { };
languageServerProtocol_protocol_DidChangeConfigurationNotification.__name__ = true;
var languageServerProtocol_protocol_ShowMessageNotification = function() { };
languageServerProtocol_protocol_ShowMessageNotification.__name__ = true;
var languageServerProtocol_protocol_ShowMessageRequest = function() { };
languageServerProtocol_protocol_ShowMessageRequest.__name__ = true;
var languageServerProtocol_protocol_LogMessageNotification = function() { };
languageServerProtocol_protocol_LogMessageNotification.__name__ = true;
var languageServerProtocol_protocol_TelemetryEventNotification = function() { };
languageServerProtocol_protocol_TelemetryEventNotification.__name__ = true;
var languageServerProtocol_protocol_DidOpenTextDocumentNotification = function() { };
languageServerProtocol_protocol_DidOpenTextDocumentNotification.__name__ = true;
var languageServerProtocol_protocol_DidChangeTextDocumentNotification = function() { };
languageServerProtocol_protocol_DidChangeTextDocumentNotification.__name__ = true;
var languageServerProtocol_protocol_DidCloseTextDocumentNotification = function() { };
languageServerProtocol_protocol_DidCloseTextDocumentNotification.__name__ = true;
var languageServerProtocol_protocol_DidSaveTextDocumentNotification = function() { };
languageServerProtocol_protocol_DidSaveTextDocumentNotification.__name__ = true;
var languageServerProtocol_protocol_WillSaveTextDocumentNotification = function() { };
languageServerProtocol_protocol_WillSaveTextDocumentNotification.__name__ = true;
var languageServerProtocol_protocol_WillSaveTextDocumentWaitUntilRequest = function() { };
languageServerProtocol_protocol_WillSaveTextDocumentWaitUntilRequest.__name__ = true;
var languageServerProtocol_protocol_DidChangeWatchedFilesNotification = function() { };
languageServerProtocol_protocol_DidChangeWatchedFilesNotification.__name__ = true;
var languageServerProtocol_protocol_PublishDiagnosticsNotification = function() { };
languageServerProtocol_protocol_PublishDiagnosticsNotification.__name__ = true;
var languageServerProtocol_protocol_CompletionRequest = function() { };
languageServerProtocol_protocol_CompletionRequest.__name__ = true;
var languageServerProtocol_protocol_CompletionResolveRequest = function() { };
languageServerProtocol_protocol_CompletionResolveRequest.__name__ = true;
var languageServerProtocol_protocol_HoverRequest = function() { };
languageServerProtocol_protocol_HoverRequest.__name__ = true;
var languageServerProtocol_protocol_SignatureHelpRequest = function() { };
languageServerProtocol_protocol_SignatureHelpRequest.__name__ = true;
var languageServerProtocol_protocol_DefinitionRequest = function() { };
languageServerProtocol_protocol_DefinitionRequest.__name__ = true;
var languageServerProtocol_protocol_ReferencesRequest = function() { };
languageServerProtocol_protocol_ReferencesRequest.__name__ = true;
var languageServerProtocol_protocol_DocumentHighlightRequest = function() { };
languageServerProtocol_protocol_DocumentHighlightRequest.__name__ = true;
var languageServerProtocol_protocol_DocumentSymbolRequest = function() { };
languageServerProtocol_protocol_DocumentSymbolRequest.__name__ = true;
var languageServerProtocol_protocol_CodeActionRequest = function() { };
languageServerProtocol_protocol_CodeActionRequest.__name__ = true;
var languageServerProtocol_protocol_CodeActionResolveRequest = function() { };
languageServerProtocol_protocol_CodeActionResolveRequest.__name__ = true;
var languageServerProtocol_protocol_WorkspaceSymbolRequest = function() { };
languageServerProtocol_protocol_WorkspaceSymbolRequest.__name__ = true;
var languageServerProtocol_protocol_WorkspaceSymbolResolveRequest = function() { };
languageServerProtocol_protocol_WorkspaceSymbolResolveRequest.__name__ = true;
var languageServerProtocol_protocol_CodeLensRequest = function() { };
languageServerProtocol_protocol_CodeLensRequest.__name__ = true;
var languageServerProtocol_protocol_CodeLensResolveRequest = function() { };
languageServerProtocol_protocol_CodeLensResolveRequest.__name__ = true;
var languageServerProtocol_protocol_CodeLensRefreshRequest = function() { };
languageServerProtocol_protocol_CodeLensRefreshRequest.__name__ = true;
var languageServerProtocol_protocol_DocumentLinkRequest = function() { };
languageServerProtocol_protocol_DocumentLinkRequest.__name__ = true;
var languageServerProtocol_protocol_DocumentLinkResolveRequest = function() { };
languageServerProtocol_protocol_DocumentLinkResolveRequest.__name__ = true;
var languageServerProtocol_protocol_DocumentFormattingRequest = function() { };
languageServerProtocol_protocol_DocumentFormattingRequest.__name__ = true;
var languageServerProtocol_protocol_DocumentRangeFormattingRequest = function() { };
languageServerProtocol_protocol_DocumentRangeFormattingRequest.__name__ = true;
var languageServerProtocol_protocol_DocumentOnTypeFormattingRequest = function() { };
languageServerProtocol_protocol_DocumentOnTypeFormattingRequest.__name__ = true;
var languageServerProtocol_protocol_RenameRequest = function() { };
languageServerProtocol_protocol_RenameRequest.__name__ = true;
var languageServerProtocol_protocol_PrepareRenameRequest = function() { };
languageServerProtocol_protocol_PrepareRenameRequest.__name__ = true;
var languageServerProtocol_protocol_ExecuteCommandRequest = function() { };
languageServerProtocol_protocol_ExecuteCommandRequest.__name__ = true;
var languageServerProtocol_protocol_ApplyWorkspaceEditRequest = function() { };
languageServerProtocol_protocol_ApplyWorkspaceEditRequest.__name__ = true;
var languageServerProtocol_protocol_SelectionRangeRequest = function() { };
languageServerProtocol_protocol_SelectionRangeRequest.__name__ = true;
var languageServerProtocol_protocol_SemanticTokensRegistrationType = function() { };
languageServerProtocol_protocol_SemanticTokensRegistrationType.__name__ = true;
var languageServerProtocol_protocol_SemanticTokensRequest = function() { };
languageServerProtocol_protocol_SemanticTokensRequest.__name__ = true;
var languageServerProtocol_protocol_SemanticTokensDeltaRequest = function() { };
languageServerProtocol_protocol_SemanticTokensDeltaRequest.__name__ = true;
var languageServerProtocol_protocol_SemanticTokensRangeRequest = function() { };
languageServerProtocol_protocol_SemanticTokensRangeRequest.__name__ = true;
var languageServerProtocol_protocol_SemanticTokensRefreshRequest = function() { };
languageServerProtocol_protocol_SemanticTokensRefreshRequest.__name__ = true;
var languageServerProtocol_protocol_ShowDocumentRequest = function() { };
languageServerProtocol_protocol_ShowDocumentRequest.__name__ = true;
var languageServerProtocol_protocol_TypeDefinitionRequest = function() { };
languageServerProtocol_protocol_TypeDefinitionRequest.__name__ = true;
var languageServerProtocol_protocol_TypeHierarchyPrepareRequest = function() { };
languageServerProtocol_protocol_TypeHierarchyPrepareRequest.__name__ = true;
var languageServerProtocol_protocol_TypeHierarchySupertypesRequest = function() { };
languageServerProtocol_protocol_TypeHierarchySupertypesRequest.__name__ = true;
var languageServerProtocol_protocol_TypeHierarchySubtypesRequest = function() { };
languageServerProtocol_protocol_TypeHierarchySubtypesRequest.__name__ = true;
var languageServerProtocol_protocol_WorkspaceFoldersRequest = function() { };
languageServerProtocol_protocol_WorkspaceFoldersRequest.__name__ = true;
var languageServerProtocol_protocol_DidChangeWorkspaceFoldersNotification = function() { };
languageServerProtocol_protocol_DidChangeWorkspaceFoldersNotification.__name__ = true;
var languageServerProtocol_textdocument_DocumentUri = {};
languageServerProtocol_textdocument_DocumentUri._new = function(uri) {
	return uri;
};
languageServerProtocol_textdocument_DocumentUri.toString = function(this1) {
	return this1;
};
var safety_SafetyException = function(message,previous,native) {
	haxe_Exception.call(this,message,previous,native);
	this.__skipStack++;
};
safety_SafetyException.__name__ = true;
safety_SafetyException.__super__ = haxe_Exception;
safety_SafetyException.prototype = $extend(haxe_Exception.prototype,{
});
var safety_NullPointerException = function(message,previous,native) {
	safety_SafetyException.call(this,message,previous,native);
	this.__skipStack++;
};
safety_NullPointerException.__name__ = true;
safety_NullPointerException.__super__ = safety_SafetyException;
safety_NullPointerException.prototype = $extend(safety_SafetyException.prototype,{
});
var sys_FileSystem = function() { };
sys_FileSystem.__name__ = true;
sys_FileSystem.exists = function(path) {
	try {
		js_node_Fs.accessSync(path);
		return true;
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return false;
	}
};
sys_FileSystem.isDirectory = function(path) {
	try {
		return js_node_Fs.statSync(path).isDirectory();
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return false;
	}
};
sys_FileSystem.createDirectory = function(path) {
	try {
		js_node_Fs.mkdirSync(path);
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var _g1 = haxe_Exception.caught(_g).unwrap();
		if(_g1.code == "ENOENT") {
			sys_FileSystem.createDirectory(js_node_Path.dirname(path));
			js_node_Fs.mkdirSync(path);
		} else {
			var stat;
			try {
				stat = js_node_Fs.statSync(path);
			} catch( _g2 ) {
				throw _g1;
			}
			if(!stat.isDirectory()) {
				throw _g1;
			}
		}
	}
};
var sys_io_FileInput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileInput.__name__ = true;
sys_io_FileInput.__super__ = haxe_io_Input;
sys_io_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		var buf = js_node_buffer_Buffer.alloc(1);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,0,1,this.pos);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(_g1.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(_g1));
			}
		}
		if(bytesRead == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos++;
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,pos,len,this.pos);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(_g1.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(_g1));
			}
		}
		if(bytesRead == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos += bytesRead;
		return bytesRead;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,eof: function() {
		return this.pos >= js_node_Fs.fstatSync(this.fd).size;
	}
});
var sys_io_FileOutput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileOutput.__name__ = true;
sys_io_FileOutput.__super__ = haxe_io_Output;
sys_io_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(b) {
		var buf = js_node_buffer_Buffer.alloc(1);
		buf[0] = b;
		js_node_Fs.writeSync(this.fd,buf,0,1,this.pos);
		this.pos++;
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var wrote = js_node_Fs.writeSync(this.fd,buf,pos,len,this.pos);
		this.pos += wrote;
		return wrote;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
});
var sys_io_FileSeek = $hxEnums["sys.io.FileSeek"] = { __ename__:true,__constructs__:null
	,SeekBegin: {_hx_name:"SeekBegin",_hx_index:0,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekCur: {_hx_name:"SeekCur",_hx_index:1,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekEnd: {_hx_name:"SeekEnd",_hx_index:2,__enum__:"sys.io.FileSeek",toString:$estr}
};
sys_io_FileSeek.__constructs__ = [sys_io_FileSeek.SeekBegin,sys_io_FileSeek.SeekCur,sys_io_FileSeek.SeekEnd];
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = "Date";
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
var diff_Diffseq_OFFSET_MAX = 1073741824;
var haxeLanguageServer_extensions_DocumentUriExtensions_driveLetterPathRe = new EReg("^/[a-zA-Z]:","");
var haxeLanguageServer_extensions_DocumentUriExtensions_uriRe = new EReg("^(([^:/?#]+?):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?","");
haxeserver_process_HaxeServerProcessNode.stdinSepBuf = js_node_buffer_Buffer.alloc(1,1);
haxeserver_repro_ReplayRecording.REPRO_PATCHFILE = "status.patch";
haxeserver_repro_ReplayRecording.UNTRACKED_DIR = "untracked";
haxeserver_repro_ReplayRecording.FILE_CONTENTS_DIR = "files";
haxeserver_repro_ReplayRecording.STASH_NAME = "Stash before replay";
jsonrpc_CancelNotification.type = "$/cancelRequest";
jsonrpc_ProgressNotification.type = "$/progress";
jsonrpc_Protocol.PROTOCOL_VERSION = "2.0";
jsonrpc_ResponseError.ParseError = -32700;
jsonrpc_ResponseError.InvalidRequest = -32600;
jsonrpc_ResponseError.MethodNotFound = -32601;
jsonrpc_ResponseError.InvalidParams = -32602;
jsonrpc_ResponseError.InternalError = -32603;
jsonrpc_ResponseError.ServerNotInitialized = -32002;
jsonrpc_ResponseError.UnknownErrorCode = -32001;
languageServerProtocol_protocol_CallHierarchyPrepareRequest.type = "textDocument/prepareCallHierarchy";
languageServerProtocol_protocol_CallHierarchyIncomingCallsRequest.type = "callHierarchy/incomingCalls";
languageServerProtocol_protocol_CallHierarchyOutgoingCallsRequest.type = "callHierarchy/outgoingCalls";
languageServerProtocol_protocol_DocumentColorRequest.type = "textDocument/documentColor";
languageServerProtocol_protocol_ColorPresentationRequest.type = "textDocument/colorPresentation";
languageServerProtocol_protocol_ConfigurationRequest.type = "workspace/configuration";
languageServerProtocol_protocol_DeclarationRequest.type = "textDocument/declaration";
languageServerProtocol_protocol_DocumentDiagnosticRequest.type = "textDocument/diagnostic";
languageServerProtocol_protocol_WorkspaceDiagnosticRequest.type = "workspace/diagnostic";
languageServerProtocol_protocol_DiagnosticRefreshRequest.type = "workspace/diagnostic/refresh";
languageServerProtocol_protocol_WillCreateFilesRequest.type = "workspace/willCreateFiles";
languageServerProtocol_protocol_DidCreateFilesNotification.type = "workspace/didCreateFiles";
languageServerProtocol_protocol_WillRenameFilesRequest.type = "workspace/willRenameFiles";
languageServerProtocol_protocol_DidRenameFilesNotification.type = "workspace/didRenameFiles";
languageServerProtocol_protocol_DidDeleteFilesNotification.type = "workspace/didDeleteFiles";
languageServerProtocol_protocol_WillDeleteFilesRequest.type = "workspace/willDeleteFiles";
languageServerProtocol_protocol_FoldingRangeRequest.type = "textDocument/foldingRange";
languageServerProtocol_protocol_ImplementationRequest.type = "textDocument/implementation";
languageServerProtocol_protocol_InlayHintRequest.type = "textDocument/inlayHint";
languageServerProtocol_protocol_HaxeInlayHintRequest.type = "haxe/inlayHints";
languageServerProtocol_protocol_InlayHintResolveRequest.type = "inlayHint/resolve";
languageServerProtocol_protocol_InlayHintRefreshRequest.type = "workspace/inlayHint/refresh";
languageServerProtocol_protocol_InlineValueRequest.type = "textDocument/inlineValue";
languageServerProtocol_protocol_InlineValueRefreshRequest.type = "workspace/inlineValue/refresh";
languageServerProtocol_protocol_LinkedEditingRangeRequest.type = "textDocument/linkedEditingRange";
languageServerProtocol_protocol_MonikerRequest.type = "textDocument/moniker";
languageServerProtocol_protocol_NotebookDocumentSyncRegistrationType.type = "notebookDocument/sync";
languageServerProtocol_protocol_DidOpenNotebookDocumentNotification.type = "notebookDocument/didOpen";
languageServerProtocol_protocol_DidChangeNotebookDocumentNotification.type = "notebookDocument/didChange";
languageServerProtocol_protocol_DidSaveNotebookDocumentNotification.type = "notebookDocument/didSave";
languageServerProtocol_protocol_DidCloseNotebookDocumentNotification.type = "notebookDocument/didClose";
languageServerProtocol_protocol_WorkDoneProgress.type = new jsonrpc_ProgressType();
languageServerProtocol_protocol_WorkDoneProgressCreateRequest.type = "window/workDoneProgress/create";
languageServerProtocol_protocol_WorkDoneProgressCancelNotification.type = "window/workDoneProgress/cancel";
languageServerProtocol_protocol_ResponseError.RequestCancelled = -32800;
languageServerProtocol_protocol_ResponseError.ContentModified = -32801;
languageServerProtocol_protocol_RegistrationRequest.type = "client/registerCapability";
languageServerProtocol_protocol_UnregistrationRequest.type = "client/unregisterCapability";
languageServerProtocol_protocol_InitializeRequest.type = "initialize";
languageServerProtocol_protocol_InitializedNotification.type = "initialized";
languageServerProtocol_protocol_ShutdownRequest.type = "shutdown";
languageServerProtocol_protocol_ExitNotification.type = "exit";
languageServerProtocol_protocol_DidChangeConfigurationNotification.type = "workspace/didChangeConfiguration";
languageServerProtocol_protocol_ShowMessageNotification.type = "window/showMessage";
languageServerProtocol_protocol_ShowMessageRequest.type = "window/showMessageRequest";
languageServerProtocol_protocol_LogMessageNotification.type = "window/logMessage";
languageServerProtocol_protocol_TelemetryEventNotification.type = "telemetry/event";
languageServerProtocol_protocol_DidOpenTextDocumentNotification.type = "textDocument/didOpen";
languageServerProtocol_protocol_DidChangeTextDocumentNotification.type = "textDocument/didChange";
languageServerProtocol_protocol_DidCloseTextDocumentNotification.type = "textDocument/didClose";
languageServerProtocol_protocol_DidSaveTextDocumentNotification.type = "textDocument/didSave";
languageServerProtocol_protocol_WillSaveTextDocumentNotification.type = "textDocument/willSave";
languageServerProtocol_protocol_WillSaveTextDocumentWaitUntilRequest.type = "textDocument/willSaveWaitUntil";
languageServerProtocol_protocol_DidChangeWatchedFilesNotification.type = "workspace/didChangeWatchedFiles";
languageServerProtocol_protocol_PublishDiagnosticsNotification.type = "textDocument/publishDiagnostics";
languageServerProtocol_protocol_CompletionRequest.type = "textDocument/completion";
languageServerProtocol_protocol_CompletionResolveRequest.type = "completionItem/resolve";
languageServerProtocol_protocol_HoverRequest.type = "textDocument/hover";
languageServerProtocol_protocol_SignatureHelpRequest.type = "textDocument/signatureHelp";
languageServerProtocol_protocol_DefinitionRequest.type = "textDocument/definition";
languageServerProtocol_protocol_ReferencesRequest.type = "textDocument/references";
languageServerProtocol_protocol_DocumentHighlightRequest.type = "textDocument/documentHighlight";
languageServerProtocol_protocol_DocumentSymbolRequest.type = "textDocument/documentSymbol";
languageServerProtocol_protocol_CodeActionRequest.type = "textDocument/codeAction";
languageServerProtocol_protocol_CodeActionResolveRequest.type = "codeAction/resolve";
languageServerProtocol_protocol_WorkspaceSymbolRequest.type = "workspace/symbol";
languageServerProtocol_protocol_WorkspaceSymbolResolveRequest.type = "workspaceSymbol/resolve";
languageServerProtocol_protocol_CodeLensRequest.type = "textDocument/codeLens";
languageServerProtocol_protocol_CodeLensResolveRequest.type = "codeLens/resolve";
languageServerProtocol_protocol_CodeLensRefreshRequest.type = "workspace/codeLens/refresh";
languageServerProtocol_protocol_DocumentLinkRequest.type = "textDocument/documentLink";
languageServerProtocol_protocol_DocumentLinkResolveRequest.type = "documentLink/resolve";
languageServerProtocol_protocol_DocumentFormattingRequest.type = "textDocument/formatting";
languageServerProtocol_protocol_DocumentRangeFormattingRequest.type = "textDocument/rangeFormatting";
languageServerProtocol_protocol_DocumentOnTypeFormattingRequest.type = "textDocument/onTypeFormatting";
languageServerProtocol_protocol_RenameRequest.type = "textDocument/rename";
languageServerProtocol_protocol_PrepareRenameRequest.type = "textDocument/prepareRename";
languageServerProtocol_protocol_ExecuteCommandRequest.type = "workspace/executeCommand";
languageServerProtocol_protocol_ApplyWorkspaceEditRequest.type = "workspace/applyEdit";
languageServerProtocol_protocol_SelectionRangeRequest.type = "textDocument/selectionRange";
languageServerProtocol_protocol_SemanticTokensRegistrationType.type = "textDocument/semanticTokens";
languageServerProtocol_protocol_SemanticTokensRequest.type = "textDocument/semanticTokens/full";
languageServerProtocol_protocol_SemanticTokensDeltaRequest.type = "textDocument/semanticTokens/full/delta";
languageServerProtocol_protocol_SemanticTokensRangeRequest.type = "textDocument/semanticTokens/range";
languageServerProtocol_protocol_SemanticTokensRefreshRequest.type = "workspace/semanticTokens/refresh";
languageServerProtocol_protocol_ShowDocumentRequest.type = "window/showDocument";
languageServerProtocol_protocol_TypeDefinitionRequest.type = "textDocument/typeDefinition";
languageServerProtocol_protocol_TypeHierarchyPrepareRequest.type = "textDocument/prepareTypeHierarchy";
languageServerProtocol_protocol_TypeHierarchySupertypesRequest.type = "typeHierarchy/supertypes";
languageServerProtocol_protocol_TypeHierarchySubtypesRequest.type = "typeHierarchy/subtypes";
languageServerProtocol_protocol_WorkspaceFoldersRequest.type = "workspace/workspaceFolders";
languageServerProtocol_protocol_DidChangeWorkspaceFoldersNotification.type = "workspace/didChangeWorkspaceFolders";
haxeserver_repro_ReplayAction_main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
